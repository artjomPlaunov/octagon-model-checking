digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N20\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
17 [label="17 @ N44\nmain\n" id="17"]
18 [label="18 @ N26\nmain\n" id="18"]
19 [label="19 @ N27\nmain\n" id="19"]
22 [label="22 @ N32\nmain\n" id="22"]
64 [fillcolor="cornflowerblue" label="64 @ N33\nmain\nAbstractionState: ABS9\n" id="64"]
65 [label="65 @ N34\nmain\n" id="65"]
76 [label="76 @ N38\nmain\n" id="76"]
77 [label="77 @ N40\nmain\n" id="77"]
81 [label="81 @ N36\nmain\n" id="81"]
82 [label="82 @ N41\nmain\n" id="82"]
84 [fillcolor="cornflowerblue" label="84 @ N33\nmain\nAbstractionState: ABS11\n" id="84"]
85 [label="85 @ N34\nmain\n" id="85"]
96 [label="96 @ N38\nmain\n" id="96"]
97 [label="97 @ N40\nmain\n" id="97"]
101 [label="101 @ N36\nmain\n" id="101"]
102 [label="102 @ N41\nmain\n" id="102"]
104 [fillcolor="cornflowerblue" label="104 @ N33\nmain\nAbstractionState: ABS13\n" id="104"]
106 [label="106 @ N35\nmain\n" id="106"]
107 [label="107 @ N11\n__VERIFIER_assert entry\n" id="107"]
108 [label="108 @ N12\n__VERIFIER_assert\n" id="108"]
109 [label="109 @ N14\n__VERIFIER_assert\n" id="109"]
112 [fillcolor="red" label="112 @ N15\n__VERIFIER_assert\nAbstractionState: ABS14\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="112"]
95 [label="95 @ N37\nmain\n" id="95"]
99 [label="99 @ N39\nmain\n" id="99"]
75 [label="75 @ N37\nmain\n" id="75"]
79 [label="79 @ N39\nmain\n" id="79"]
0 -> 17 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 17"]
17 -> 18 [color="red" label="Lines 7 - 31: \lvoid abort();\lvoid __assert_fail(const char *, const char *, unsigned int, const char *);\lvoid reach_error();\lvoid assume_abort_if_not(int cond);\lvoid __VERIFIER_assert(int cond);\lint SIZE = 2000000;\lint __VERIFIER_nondet_int();\lint main();\lFunction start dummy edge\lunsigned int n;\lunsigned int i;\lunsigned int j;\lunsigned int l = 0;\ln = SIZE;\l" id="17 -> 18"]
18 -> 19 [color="red" label="Line 32: \l[n <= SIZE]\l" id="18 -> 19"]
18 -> 20 [label="Line 32: \l[!(n <= SIZE)]\l" id="18 -> 20"]
19 -> 22 [color="red" label="Lines 34 - 36: \li = 0;\lj = 0;\ll = 0;\l" id="19 -> 22"]
22 -> 64 [color="red" label="Line 37: \lwhile\l" id="22 -> 64"]
64 -> 65 [color="red" label="Line 37: \l[l < n]\l" id="64 -> 65"]
64 -> 66 [label="Line 37: \l[!(l < n)]\l" id="64 -> 66"]
65 -> 75 [label="Line 39: \l[(l % 2) == 0]\l" id="65 -> 75"]
65 -> 76 [color="red" label="Line 39: \l[!((l % 2) == 0)]\l" id="65 -> 76"]
76 -> 77 [color="red" label="Line 42: \lj = j + 1;\l" id="76 -> 77"]
77 -> 81 [color="red" label="Line 0: \l\l" id="77 -> 81"]
81 -> 82 [color="red" label="Line 43: \ll = l + 1;\l" id="81 -> 82"]
82 -> 84 [color="red" label="Line 0: \l\l" id="82 -> 84"]
84 -> 85 [color="red" label="Line 37: \l[l < n]\l" id="84 -> 85"]
84 -> 86 [label="Line 37: \l[!(l < n)]\l" id="84 -> 86"]
85 -> 95 [label="Line 39: \l[(l % 2) == 0]\l" id="85 -> 95"]
85 -> 96 [color="red" label="Line 39: \l[!((l % 2) == 0)]\l" id="85 -> 96"]
96 -> 97 [color="red" label="Line 42: \lj = j + 1;\l" id="96 -> 97"]
97 -> 101 [color="red" label="Line 0: \l\l" id="97 -> 101"]
101 -> 102 [color="red" label="Line 43: \ll = l + 1;\l" id="101 -> 102"]
102 -> 104 [color="red" label="Line 0: \l\l" id="102 -> 104"]
104 -> 105 [label="Line 37: \l[l < n]\l" id="104 -> 105"]
104 -> 106 [color="red" label="Line 37: \l[!(l < n)]\l" id="104 -> 106"]
106 -> 107 [color="red" label="Line 45: \l__VERIFIER_assert((i + j) == 2000000)\l" id="106 -> 107"]
107 -> 108 [color="red" label="Line 0: \lFunction start dummy edge\l" id="107 -> 108"]
108 -> 109 [color="red" label="Line 19: \l[cond == 0]\l" id="108 -> 109"]
108 -> 110 [label="Line 19: \l[!(cond == 0)]\l" id="108 -> 110"]
109 -> 112 [color="red" label="Line 20: \lLabel: ERROR\l" id="109 -> 112"]
95 -> 99 [label="Line 40: \li = i + 1;\l" id="95 -> 99"]
99 -> 101 [label="Line 0: \l\l" id="99 -> 101"]
75 -> 79 [label="Line 40: \li = i + 1;\l" id="75 -> 79"]
79 -> 81 [label="Line 0: \l\l" id="79 -> 81"]
}
