digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N20\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
1 [label="1 @ N44\nmain\n" id="1"]
2 [label="2 @ N26\nmain\n" id="2"]
3 [label="3 @ N27\nmain\n" id="3"]
6 [label="6 @ N32\nmain\n" id="6"]
8 [fillcolor="cornflowerblue" label="8 @ N33\nmain\nAbstractionState: ABS1: true\n" id="8"]
10 [label="10 @ N35\nmain\n" id="10"]
11 [label="11 @ N11\n__VERIFIER_assert entry\n" id="11"]
12 [label="12 @ N12\n__VERIFIER_assert\n" id="12"]
13 [label="13 @ N14\n__VERIFIER_assert\n" id="13"]
16 [fillcolor="red" label="16 @ N15\n__VERIFIER_assert\nAbstractionState: ABS2: true\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="16"]
0 -> 1 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 1"]
1 -> 2 [color="red" label="Lines 7 - 31: \lvoid abort();\lvoid __assert_fail(const char *, const char *, unsigned int, const char *);\lvoid reach_error();\lvoid assume_abort_if_not(int cond);\lvoid __VERIFIER_assert(int cond);\lint SIZE = 2000000;\lint __VERIFIER_nondet_int();\lint main();\lFunction start dummy edge\lunsigned int n;\lunsigned int i;\lunsigned int j;\lunsigned int l = 0;\ln = SIZE;\l" id="1 -> 2"]
2 -> 3 [color="red" label="Line 32: \l[n <= SIZE]\l" id="2 -> 3"]
2 -> 4 [label="Line 32: \l[!(n <= SIZE)]\l" id="2 -> 4"]
3 -> 6 [color="red" label="Lines 34 - 36: \li = 0;\lj = 0;\ll = 0;\l" id="3 -> 6"]
6 -> 8 [color="red" label="Line 37: \lwhile\l" id="6 -> 8"]
8 -> 9 [label="Line 37: \l[l < n]\l" id="8 -> 9"]
8 -> 10 [color="red" label="Line 37: \l[!(l < n)]\l" id="8 -> 10"]
10 -> 11 [color="red" label="Line 45: \l__VERIFIER_assert((i + j) == 2000000)\l" id="10 -> 11"]
11 -> 12 [color="red" label="Line 0: \lFunction start dummy edge\l" id="11 -> 12"]
12 -> 13 [color="red" label="Line 19: \l[cond == 0]\l" id="12 -> 13"]
12 -> 14 [label="Line 19: \l[!(cond == 0)]\l" id="12 -> 14"]
13 -> 16 [color="red" label="Line 20: \lLabel: ERROR\l" id="13 -> 16"]
}
