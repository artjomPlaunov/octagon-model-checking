digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N20\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
17 [label="17 @ N44\nmain\n" id="17"]
18 [label="18 @ N26\nmain\n" id="18"]
19 [label="19 @ N27\nmain\n" id="19"]
22 [label="22 @ N32\nmain\n" id="22"]
184 [fillcolor="cornflowerblue" label="184 @ N33\nmain\nAbstractionState: ABS23\n" id="184"]
185 [label="185 @ N34\nmain\n" id="185"]
196 [label="196 @ N38\nmain\n" id="196"]
197 [label="197 @ N40\nmain\n" id="197"]
201 [label="201 @ N36\nmain\n" id="201"]
202 [label="202 @ N41\nmain\n" id="202"]
204 [fillcolor="cornflowerblue" label="204 @ N33\nmain\nAbstractionState: ABS25\n" id="204"]
205 [label="205 @ N34\nmain\n" id="205"]
216 [label="216 @ N38\nmain\n" id="216"]
217 [label="217 @ N40\nmain\n" id="217"]
221 [label="221 @ N36\nmain\n" id="221"]
222 [label="222 @ N41\nmain\n" id="222"]
224 [fillcolor="cornflowerblue" label="224 @ N33\nmain\nAbstractionState: ABS27\n" id="224"]
225 [label="225 @ N34\nmain\n" id="225"]
236 [label="236 @ N38\nmain\n" id="236"]
237 [label="237 @ N40\nmain\n" id="237"]
241 [label="241 @ N36\nmain\n" id="241"]
242 [label="242 @ N41\nmain\n" id="242"]
244 [fillcolor="cornflowerblue" label="244 @ N33\nmain\nAbstractionState: ABS29\n" id="244"]
245 [label="245 @ N34\nmain\n" id="245"]
256 [label="256 @ N38\nmain\n" id="256"]
257 [label="257 @ N40\nmain\n" id="257"]
261 [label="261 @ N36\nmain\n" id="261"]
262 [label="262 @ N41\nmain\n" id="262"]
264 [fillcolor="cornflowerblue" label="264 @ N33\nmain\nAbstractionState: ABS31\n" id="264"]
266 [label="266 @ N35\nmain\n" id="266"]
267 [label="267 @ N11\n__VERIFIER_assert entry\n" id="267"]
268 [label="268 @ N12\n__VERIFIER_assert\n" id="268"]
269 [label="269 @ N14\n__VERIFIER_assert\n" id="269"]
272 [fillcolor="red" label="272 @ N15\n__VERIFIER_assert\nAbstractionState: ABS32\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="272"]
255 [label="255 @ N37\nmain\n" id="255"]
259 [label="259 @ N39\nmain\n" id="259"]
235 [label="235 @ N37\nmain\n" id="235"]
239 [label="239 @ N39\nmain\n" id="239"]
215 [label="215 @ N37\nmain\n" id="215"]
219 [label="219 @ N39\nmain\n" id="219"]
195 [label="195 @ N37\nmain\n" id="195"]
199 [label="199 @ N39\nmain\n" id="199"]
0 -> 17 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 17"]
17 -> 18 [color="red" label="Lines 7 - 31: \lvoid abort();\lvoid __assert_fail(const char *, const char *, unsigned int, const char *);\lvoid reach_error();\lvoid assume_abort_if_not(int cond);\lvoid __VERIFIER_assert(int cond);\lint SIZE = 2000000;\lint __VERIFIER_nondet_int();\lint main();\lFunction start dummy edge\lunsigned int n;\lunsigned int i;\lunsigned int j;\lunsigned int l = 0;\ln = SIZE;\l" id="17 -> 18"]
18 -> 19 [color="red" label="Line 32: \l[n <= SIZE]\l" id="18 -> 19"]
18 -> 20 [label="Line 32: \l[!(n <= SIZE)]\l" id="18 -> 20"]
19 -> 22 [color="red" label="Lines 34 - 36: \li = 0;\lj = 0;\ll = 0;\l" id="19 -> 22"]
22 -> 184 [color="red" label="Line 37: \lwhile\l" id="22 -> 184"]
184 -> 185 [color="red" label="Line 37: \l[l < n]\l" id="184 -> 185"]
184 -> 186 [label="Line 37: \l[!(l < n)]\l" id="184 -> 186"]
185 -> 195 [label="Line 39: \l[(l % 2) == 0]\l" id="185 -> 195"]
185 -> 196 [color="red" label="Line 39: \l[!((l % 2) == 0)]\l" id="185 -> 196"]
196 -> 197 [color="red" label="Line 42: \lj = j + 1;\l" id="196 -> 197"]
197 -> 201 [color="red" label="Line 0: \l\l" id="197 -> 201"]
201 -> 202 [color="red" label="Line 43: \ll = l + 1;\l" id="201 -> 202"]
202 -> 204 [color="red" label="Line 0: \l\l" id="202 -> 204"]
204 -> 205 [color="red" label="Line 37: \l[l < n]\l" id="204 -> 205"]
204 -> 206 [label="Line 37: \l[!(l < n)]\l" id="204 -> 206"]
205 -> 215 [label="Line 39: \l[(l % 2) == 0]\l" id="205 -> 215"]
205 -> 216 [color="red" label="Line 39: \l[!((l % 2) == 0)]\l" id="205 -> 216"]
216 -> 217 [color="red" label="Line 42: \lj = j + 1;\l" id="216 -> 217"]
217 -> 221 [color="red" label="Line 0: \l\l" id="217 -> 221"]
221 -> 222 [color="red" label="Line 43: \ll = l + 1;\l" id="221 -> 222"]
222 -> 224 [color="red" label="Line 0: \l\l" id="222 -> 224"]
224 -> 225 [color="red" label="Line 37: \l[l < n]\l" id="224 -> 225"]
224 -> 226 [label="Line 37: \l[!(l < n)]\l" id="224 -> 226"]
225 -> 235 [label="Line 39: \l[(l % 2) == 0]\l" id="225 -> 235"]
225 -> 236 [color="red" label="Line 39: \l[!((l % 2) == 0)]\l" id="225 -> 236"]
236 -> 237 [color="red" label="Line 42: \lj = j + 1;\l" id="236 -> 237"]
237 -> 241 [color="red" label="Line 0: \l\l" id="237 -> 241"]
241 -> 242 [color="red" label="Line 43: \ll = l + 1;\l" id="241 -> 242"]
242 -> 244 [color="red" label="Line 0: \l\l" id="242 -> 244"]
244 -> 245 [color="red" label="Line 37: \l[l < n]\l" id="244 -> 245"]
244 -> 246 [label="Line 37: \l[!(l < n)]\l" id="244 -> 246"]
245 -> 255 [label="Line 39: \l[(l % 2) == 0]\l" id="245 -> 255"]
245 -> 256 [color="red" label="Line 39: \l[!((l % 2) == 0)]\l" id="245 -> 256"]
256 -> 257 [color="red" label="Line 42: \lj = j + 1;\l" id="256 -> 257"]
257 -> 261 [color="red" label="Line 0: \l\l" id="257 -> 261"]
261 -> 262 [color="red" label="Line 43: \ll = l + 1;\l" id="261 -> 262"]
262 -> 264 [color="red" label="Line 0: \l\l" id="262 -> 264"]
264 -> 265 [label="Line 37: \l[l < n]\l" id="264 -> 265"]
264 -> 266 [color="red" label="Line 37: \l[!(l < n)]\l" id="264 -> 266"]
266 -> 267 [color="red" label="Line 45: \l__VERIFIER_assert((i + j) == 2000000)\l" id="266 -> 267"]
267 -> 268 [color="red" label="Line 0: \lFunction start dummy edge\l" id="267 -> 268"]
268 -> 269 [color="red" label="Line 19: \l[cond == 0]\l" id="268 -> 269"]
268 -> 270 [label="Line 19: \l[!(cond == 0)]\l" id="268 -> 270"]
269 -> 272 [color="red" label="Line 20: \lLabel: ERROR\l" id="269 -> 272"]
255 -> 259 [label="Line 40: \li = i + 1;\l" id="255 -> 259"]
259 -> 261 [label="Line 0: \l\l" id="259 -> 261"]
235 -> 239 [label="Line 40: \li = i + 1;\l" id="235 -> 239"]
239 -> 241 [label="Line 0: \l\l" id="239 -> 241"]
215 -> 219 [label="Line 40: \li = i + 1;\l" id="215 -> 219"]
219 -> 221 [label="Line 0: \l\l" id="219 -> 221"]
195 -> 199 [label="Line 40: \li = i + 1;\l" id="195 -> 199"]
199 -> 201 [label="Line 0: \l\l" id="199 -> 201"]
}
