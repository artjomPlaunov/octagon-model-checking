digraph CFA {
20 [shape="circle" label="N20\n32"]
42 [shape="circle" label="N42\n31"]
43 [shape="circle" label="N43\n30"]
44 [shape="circle" label="N44\n29"]
45 [shape="circle" label="N45\n28"]
46 [shape="circle" label="N46\n27"]
47 [shape="circle" label="N47\n26"]
48 [shape="circle" label="N48\n25"]
49 [shape="circle" label="N49\n24"]
50 [shape="circle" label="N50\n23"]
51 [shape="circle" label="N51\n22"]
21 [shape="circle" label="N21\n21"]
22 [shape="circle" label="N22\n20"]
23 [shape="circle" label="N23\n19"]
24 [shape="circle" label="N24\n18"]
25 [shape="circle" label="N25\n17"]
26 [shape="diamond" label="N26\n16"]
27 [shape="circle" label="N27\n2"]
11 [shape="circle" label="N11\n7"]
12 [shape="diamond" label="N12\n6"]
13 [shape="circle" label="N13\n1"]
10 [shape="circle" label="N10\n0"]
41 [shape="circle" label="N41\n1"]
19 [shape="circle" label="N19\n0"]
14 [shape="circle" label="N14\n5"]
15 [shape="circle" label="N15\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
56 [shape="circle" label="N56\n0"]
16 [shape="circle" label="N16\n3"]
28 [shape="circle" label="N28\n15"]
29 [shape="diamond" label="N29\n14"]
32 [shape="circle" label="N32\n10"]
35 [shape="diamond" label="N35\n8"]
54 [shape="circle" label="N54\n0"]
36 [shape="circle" label="N36\n7"]
37 [shape="circle" label="N37\n6"]
38 [shape="circle" label="N38\n5"]
39 [shape="diamond" label="N39\n4"]
55 [shape="circle" label="N55\n0"]
40 [shape="circle" label="N40\n3"]
34 [shape="diamond" label="N34\n13"]
33 [shape="diamond" label="N33\n12"]
30 [shape="diamond" label="N30\n11"]
31 [shape="circle" label="N31\n9"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
11 -> 12 [label="Function start dummy edge"]
12 -> 14 [label="[cond == 0]"]
12 -> 13 [label="[!(cond == 0)]"]
13 -> 10 [label="return;"]
14 -> 15 [label="Label: ERROR"]
15 -> 16 [label="reach_error();" style="dotted" arrowhead="empty"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
}
subgraph cluster_main {
label="main()"
20 -> 42 [label="INIT GLOBAL VARS"]
42 -> 43 [label="void abort();"]
43 -> 44 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
44 -> 45 [label="void reach_error();"]
45 -> 46 [label="void assume_abort_if_not(int cond);"]
46 -> 47 [label="void __VERIFIER_assert(int cond);"]
47 -> 48 [label="void __VERIFIER_assume(int);"]
48 -> 49 [label="int __VERIFIER_nondet_int();"]
49 -> 50 [label="unsigned int __VERIFIER_nondet_uint();"]
50 -> 51 [label="int main();"]
51 -> 21 [label="Function start dummy edge"]
21 -> 22 [label="int A[2048] = { 0 };"]
22 -> 23 [label="int B[2048] = { 0 };"]
23 -> 24 [label="int i;"]
24 -> 25 [label="int tmp;"]
25 -> 26 [label="i = 0;"]
26 -> 28 [label="[i < 2048]"]
26 -> 27 [label="[!(i < 2048)]"]
27 -> 41 [label="__VERIFIER_assert((A[1024]) == (B[1024]));" style="dotted" arrowhead="empty"]
41 -> 19 [label="default return"]
28 -> 29 [label="int __CPAchecker_TMP_0;"]
29 -> 34 [label="[i >= 0]"]
29 -> 32 [label="[!(i >= 0)]"]
32 -> 35 [label="__CPAchecker_TMP_0 = 0;"]
35 -> 36 [label="[__CPAchecker_TMP_0 != 0]"]
35 -> 54 [label="[!(__CPAchecker_TMP_0 != 0)]"]
36 -> 37 [label="tmp = A[i];"]
37 -> 38 [label="B[i] = tmp;"]
38 -> 39 [label="i = i + 1;"]
39 -> 40 [label="[i >= 2048]"]
39 -> 55 [label="[!(i >= 2048)]"]
40 -> 27 [label=""]
34 -> 33 [label="[i < 2048]"]
34 -> 32 [label="[!(i < 2048)]"]
33 -> 30 [label="[(A[i]) == 0]"]
33 -> 32 [label="[!((A[i]) == 0)]"]
30 -> 31 [label="[(B[i]) == 0]"]
30 -> 32 [label="[!((B[i]) == 0)]"]
31 -> 35 [label="__CPAchecker_TMP_0 = 1;"]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 56 [label="__assert_fail(\"0\", \"loop-simple-no-abs.c\", 3, \"reach_error\");"]}
27 -> 11 [label="__VERIFIER_assert((A[1024]) == (B[1024]))"]
10 -> 41 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert((A[1024]) == (B[1024]));"]
15 -> 1 [label="reach_error()"]}