digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N20\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
1 [label="1 @ N42\nmain\n" id="1"]
2 [label="2 @ N26\nmain\n" id="2"]
26 [label="26 @ N27\nmain\n" id="26"]
27 [label="27 @ N11\n__VERIFIER_assert entry\n" id="27"]
28 [label="28 @ N12\n__VERIFIER_assert\n" id="28"]
30 [label="30 @ N13\n__VERIFIER_assert\n" id="30"]
34 [label="34 @ N10\n__VERIFIER_assert exit\n" id="34"]
35 [label="35 @ N41\nmain\n" id="35"]
36 [label="36 @ N19\nmain exit\n" id="36"]
29 [label="29 @ N14\n__VERIFIER_assert\n" id="29"]
3 [label="3 @ N28\nmain\n" id="3"]
5 [label="5 @ N29\nmain\n" id="5"]
16 [label="16 @ N32\nmain\n" id="16"]
19 [label="19 @ N35\nmain\n" id="19"]
21 [label="21 @ N54\nmain\n" id="21"]
20 [label="20 @ N36\nmain\n" id="20"]
22 [label="22 @ N39\nmain\n" id="22"]
24 [label="24 @ N55\nmain\n" id="24"]
23 [label="23 @ N40\nmain\n" id="23"]
6 [label="6 @ N34\nmain\n" id="6"]
8 [label="8 @ N33\nmain\n" id="8"]
11 [label="11 @ N30\nmain\n" id="11"]
14 [label="14 @ N31\nmain\n" id="14"]
0 -> 1 [label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 1"]
1 -> 2 [label="Lines 7 - 29: \lvoid abort();\lvoid __assert_fail(const char *, const char *, unsigned int, const char *);\lvoid reach_error();\lvoid assume_abort_if_not(int cond);\lvoid __VERIFIER_assert(int cond);\lvoid __VERIFIER_assume(int);\lint __VERIFIER_nondet_int();\lunsigned int __VERIFIER_nondet_uint();\lint main();\lFunction start dummy edge\lint A[2048] = { 0 };\lint B[2048] = { 0 };\lint i;\lint tmp;\li = 0;\l" id="1 -> 2"]
2 -> 3 [label="Line 30: \l[i < 2048]\l" id="2 -> 3"]
2 -> 26 [label="Line 30: \l[!(i < 2048)]\l" id="2 -> 26"]
26 -> 27 [label="Line 39: \l__VERIFIER_assert((A[1024]) == (B[1024]))\l" id="26 -> 27"]
27 -> 28 [label="Line 0: \lFunction start dummy edge\l" id="27 -> 28"]
28 -> 29 [label="Line 15: \l[cond == 0]\l" id="28 -> 29"]
28 -> 30 [label="Line 15: \l[!(cond == 0)]\l" id="28 -> 30"]
30 -> 34 [label="Line 18: \lreturn;\l" id="30 -> 34"]
34 -> 35 [label="Line 39: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((A[1024]) == (B[1024]));\l" id="34 -> 35"]
35 -> 36 [label="Line 0: \ldefault return\l" id="35 -> 36"]
3 -> 5 [label="Line 31: \lint __CPAchecker_TMP_0;\l" id="3 -> 5"]
5 -> 6 [label="Line 31: \l[i >= 0]\l" id="5 -> 6"]
5 -> 16 [label="Line 31: \l[!(i >= 0)]\l" id="5 -> 16"]
16 -> 19 [label="Line 0: \l__CPAchecker_TMP_0 = 0;\l" id="16 -> 19"]
19 -> 20 [label="Line 31: \l[__CPAchecker_TMP_0 != 0]\l" id="19 -> 20"]
19 -> 21 [label="Line 31: \l[!(__CPAchecker_TMP_0 != 0)]\l" id="19 -> 21"]
20 -> 22 [label="Lines 32 - 34: \ltmp = A[i];\lB[i] = tmp;\li = i + 1;\l" id="20 -> 22"]
22 -> 23 [label="Line 35: \l[i >= 2048]\l" id="22 -> 23"]
22 -> 24 [label="Line 35: \l[!(i >= 2048)]\l" id="22 -> 24"]
23 -> 26 [label="Line 0: \l\l" id="23 -> 26"]
6 -> 8 [label="Line 31: \l[i < 2048]\l" id="6 -> 8"]
6 -> 16 [label="Line 31: \l[!(i < 2048)]\l" id="6 -> 16"]
8 -> 11 [label="Line 31: \l[(A[i]) == 0]\l" id="8 -> 11"]
8 -> 16 [label="Line 31: \l[!((A[i]) == 0)]\l" id="8 -> 16"]
11 -> 14 [label="Line 31: \l[(B[i]) == 0]\l" id="11 -> 14"]
11 -> 16 [label="Line 31: \l[!((B[i]) == 0)]\l" id="11 -> 16"]
14 -> 19 [label="Line 0: \l__CPAchecker_TMP_0 = 1;\l" id="14 -> 19"]
}
