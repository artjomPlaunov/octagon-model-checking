digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N20\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
13 [label="13 @ N34\nmain\n" id="13"]
14 [label="14 @ N26\nmain\n" id="14"]
26 [fillcolor="cornflowerblue" label="26 @ N27\nmain\nAbstractionState: ABS5\n" id="26"]
27 [label="27 @ N28\nmain\n" id="27"]
37 [label="37 @ N32\nmain\n" id="37"]
39 [fillcolor="cornflowerblue" label="39 @ N27\nmain\nAbstractionState: ABS7\n" id="39"]
41 [label="41 @ N29\nmain\n" id="41"]
42 [label="42 @ N11\n__VERIFIER_assert entry\n" id="42"]
43 [label="43 @ N12\n__VERIFIER_assert\n" id="43"]
44 [label="44 @ N14\n__VERIFIER_assert\n" id="44"]
47 [fillcolor="red" label="47 @ N15\n__VERIFIER_assert\nAbstractionState: ABS8\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="47"]
0 -> 13 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 13"]
13 -> 14 [color="red" label="Lines 7 - 29: \lvoid abort();\lvoid __assert_fail(const char *, const char *, unsigned int, const char *);\lvoid reach_error();\lvoid assume_abort_if_not(int cond);\lvoid __VERIFIER_assert(int cond);\lvoid __VERIFIER_assume(int);\lint __VERIFIER_nondet_int();\lunsigned int __VERIFIER_nondet_uint();\lint main();\lFunction start dummy edge\lint A[2048] = { 0 };\lint B[2048] = { 0 };\lint i;\lint tmp;\li = 0;\l" id="13 -> 14"]
14 -> 26 [color="red" label="Line 30: \lwhile\l" id="14 -> 26"]
26 -> 27 [color="red" label="Line 30: \l[i < 2048]\l" id="26 -> 27"]
26 -> 28 [label="Line 30: \l[!(i < 2048)]\l" id="26 -> 28"]
27 -> 37 [color="red" label="Lines 32 - 34: \ltmp = A[i];\lB[i] = tmp;\li = i + 1;\l" id="27 -> 37"]
37 -> 39 [color="red" label="Line 0: \l\l" id="37 -> 39"]
39 -> 40 [label="Line 30: \l[i < 2048]\l" id="39 -> 40"]
39 -> 41 [color="red" label="Line 30: \l[!(i < 2048)]\l" id="39 -> 41"]
41 -> 42 [color="red" label="Line 39: \l__VERIFIER_assert((A[1024]) == (B[1024]))\l" id="41 -> 42"]
42 -> 43 [color="red" label="Line 0: \lFunction start dummy edge\l" id="42 -> 43"]
43 -> 44 [color="red" label="Line 15: \l[cond == 0]\l" id="43 -> 44"]
43 -> 45 [label="Line 15: \l[!(cond == 0)]\l" id="43 -> 45"]
44 -> 47 [color="red" label="Line 16: \lLabel: ERROR\l" id="44 -> 47"]
}
