digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N20\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
1 [label="1 @ N42\nmain\n" id="1"]
2 [label="2 @ N26\nmain\n" id="2"]
4 [fillcolor="cornflowerblue" label="4 @ N27\nmain\nAbstractionState: ABS1: true\n" id="4"]
6 [label="6 @ N29\nmain\n" id="6"]
7 [label="7 @ N11\n__VERIFIER_assert entry\n" id="7"]
8 [label="8 @ N12\n__VERIFIER_assert\n" id="8"]
9 [label="9 @ N14\n__VERIFIER_assert\n" id="9"]
12 [fillcolor="red" label="12 @ N15\n__VERIFIER_assert\nAbstractionState: ABS2: true\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="12"]
0 -> 1 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 1"]
1 -> 2 [color="red" label="Lines 7 - 29: \lvoid abort();\lvoid __assert_fail(const char *, const char *, unsigned int, const char *);\lvoid reach_error();\lvoid assume_abort_if_not(int cond);\lvoid __VERIFIER_assert(int cond);\lvoid __VERIFIER_assume(int);\lint __VERIFIER_nondet_int();\lunsigned int __VERIFIER_nondet_uint();\lint main();\lFunction start dummy edge\lint A[2048] = { 0 };\lint B[2048] = { 0 };\lint i;\lint tmp;\li = 0;\l" id="1 -> 2"]
2 -> 4 [color="red" label="Line 30: \lwhile\l" id="2 -> 4"]
4 -> 5 [label="Line 30: \l[i < 2048]\l" id="4 -> 5"]
4 -> 6 [color="red" label="Line 30: \l[!(i < 2048)]\l" id="4 -> 6"]
6 -> 7 [color="red" label="Line 39: \l__VERIFIER_assert((A[1024]) == (B[1024]))\l" id="6 -> 7"]
7 -> 8 [color="red" label="Line 0: \lFunction start dummy edge\l" id="7 -> 8"]
8 -> 9 [color="red" label="Line 15: \l[cond == 0]\l" id="8 -> 9"]
8 -> 10 [label="Line 15: \l[!(cond == 0)]\l" id="8 -> 10"]
9 -> 12 [color="red" label="Line 16: \lLabel: ERROR\l" id="9 -> 12"]
}
