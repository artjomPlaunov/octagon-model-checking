digraph CFA {
141 [shape="circle" label="N141\n41"]
171 [shape="circle" label="N171\n40"]
172 [shape="circle" label="N172\n39"]
173 [shape="circle" label="N173\n38"]
174 [shape="circle" label="N174\n37"]
175 [shape="circle" label="N175\n36"]
176 [shape="circle" label="N176\n35"]
177 [shape="circle" label="N177\n34"]
178 [shape="circle" label="N178\n33"]
179 [shape="circle" label="N179\n32"]
180 [shape="circle" label="N180\n31"]
181 [shape="circle" label="N181\n30"]
142 [shape="circle" label="N142\n29"]
143 [shape="circle" label="N143\n28"]
144 [shape="circle" label="N144\n27"]
145 [shape="circle" label="N145\n26"]
146 [shape="circle" label="N146\n25"]
147 [shape="circle" label="N147\n24"]
148 [shape="circle" label="N148\n23"]
149 [shape="circle" label="N149\n22"]
150 [shape="circle" label="N150\n21"]
151 [shape="doublecircle" label="N151\n20"]
153 [shape="circle" label="N153\n19"]
166 [shape="circle" label="N166\n18"]
167 [shape="circle" label="N167\n17"]
20 [shape="circle" label="N20\n119"]
21 [shape="circle" label="N21\n118"]
22 [shape="circle" label="N22\n117"]
23 [shape="circle" label="N23\n116"]
24 [shape="circle" label="N24\n115"]
25 [shape="circle" label="N25\n114"]
26 [shape="circle" label="N26\n113"]
27 [shape="circle" label="N27\n112"]
28 [shape="circle" label="N28\n111"]
29 [shape="circle" label="N29\n110"]
30 [shape="circle" label="N30\n109"]
31 [shape="circle" label="N31\n108"]
32 [shape="circle" label="N32\n107"]
33 [shape="circle" label="N33\n106"]
34 [shape="circle" label="N34\n105"]
35 [shape="circle" label="N35\n104"]
36 [shape="circle" label="N36\n103"]
37 [shape="circle" label="N37\n102"]
38 [shape="circle" label="N38\n101"]
39 [shape="circle" label="N39\n100"]
40 [shape="circle" label="N40\n99"]
41 [shape="circle" label="N41\n98"]
42 [shape="circle" label="N42\n97"]
43 [shape="circle" label="N43\n96"]
44 [shape="circle" label="N44\n95"]
45 [shape="circle" label="N45\n94"]
46 [shape="circle" label="N46\n93"]
47 [shape="circle" label="N47\n92"]
48 [shape="diamond" label="N48\n91"]
49 [shape="circle" label="N49\n82"]
58 [shape="diamond" label="N58\n81"]
59 [shape="circle" label="N59\n72"]
68 [shape="circle" label="N68\n71"]
69 [shape="circle" label="N69\n70"]
70 [shape="doublecircle" label="N70\n69"]
74 [shape="diamond" label="N74\n68"]
73 [shape="diamond" label="N73\n67"]
72 [shape="circle" label="N72\n66"]
122 [shape="doublecircle" label="N122\n65"]
124 [shape="circle" label="N124\n64"]
138 [shape="circle" label="N138\n63"]
19 [shape="circle" label="N19\n62"]
168 [shape="circle" label="N168\n16"]
11 [shape="circle" label="N11\n7"]
12 [shape="diamond" label="N12\n6"]
13 [shape="circle" label="N13\n1"]
10 [shape="circle" label="N10\n0"]
170 [shape="circle" label="N170\n14"]
140 [shape="circle" label="N140\n13"]
169 [shape="circle" label="N169\n15"]
14 [shape="circle" label="N14\n5"]
15 [shape="circle" label="N15\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
186 [shape="circle" label="N186\n0"]
16 [shape="circle" label="N16\n3"]
123 [shape="diamond" label="N123\n61"]
125 [shape="diamond" label="N125\n58"]
128 [shape="diamond" label="N128\n55"]
131 [shape="diamond" label="N131\n52"]
134 [shape="circle" label="N134\n49"]
137 [shape="circle" label="N137\n48"]
135 [shape="circle" label="N135\n51"]
136 [shape="circle" label="N136\n50"]
132 [shape="circle" label="N132\n54"]
133 [shape="circle" label="N133\n53"]
129 [shape="circle" label="N129\n57"]
130 [shape="circle" label="N130\n56"]
126 [shape="circle" label="N126\n60"]
127 [shape="circle" label="N127\n59"]
71 [shape="circle" label="N71\n47"]
75 [shape="circle" label="N75\n46"]
76 [shape="diamond" label="N76\n45"]
77 [shape="diamond" label="N77\n31"]
91 [shape="diamond" label="N91\n17"]
105 [shape="diamond" label="N105\n13"]
109 [shape="diamond" label="N109\n10"]
112 [shape="diamond" label="N112\n7"]
115 [shape="diamond" label="N115\n4"]
118 [shape="circle" label="N118\n1"]
121 [shape="circle" label="N121\n0"]
119 [shape="circle" label="N119\n3"]
120 [shape="circle" label="N120\n2"]
116 [shape="circle" label="N116\n6"]
117 [shape="circle" label="N117\n5"]
113 [shape="circle" label="N113\n9"]
114 [shape="circle" label="N114\n8"]
110 [shape="circle" label="N110\n12"]
111 [shape="circle" label="N111\n11"]
106 [shape="circle" label="N106\n16"]
107 [shape="circle" label="N107\n15"]
108 [shape="circle" label="N108\n14"]
92 [shape="diamond" label="N92\n30"]
93 [shape="diamond" label="N93\n27"]
96 [shape="diamond" label="N96\n24"]
99 [shape="diamond" label="N99\n21"]
102 [shape="circle" label="N102\n20"]
103 [shape="circle" label="N103\n19"]
104 [shape="circle" label="N104\n18"]
100 [shape="circle" label="N100\n23"]
101 [shape="circle" label="N101\n22"]
97 [shape="circle" label="N97\n26"]
98 [shape="circle" label="N98\n25"]
94 [shape="circle" label="N94\n29"]
95 [shape="circle" label="N95\n28"]
78 [shape="diamond" label="N78\n44"]
79 [shape="diamond" label="N79\n41"]
82 [shape="diamond" label="N82\n38"]
85 [shape="diamond" label="N85\n35"]
88 [shape="circle" label="N88\n34"]
89 [shape="circle" label="N89\n33"]
90 [shape="circle" label="N90\n32"]
86 [shape="circle" label="N86\n37"]
87 [shape="circle" label="N87\n36"]
83 [shape="circle" label="N83\n40"]
84 [shape="circle" label="N84\n39"]
80 [shape="circle" label="N80\n43"]
81 [shape="circle" label="N81\n42"]
60 [shape="circle" label="N60\n80"]
61 [shape="diamond" label="N61\n79"]
62 [shape="circle" label="N62\n78"]
63 [shape="circle" label="N63\n77"]
64 [shape="diamond" label="N64\n76"]
65 [shape="circle" label="N65\n75"]
66 [shape="circle" label="N66\n74"]
67 [shape="circle" label="N67\n73"]
50 [shape="circle" label="N50\n90"]
51 [shape="diamond" label="N51\n89"]
52 [shape="circle" label="N52\n88"]
53 [shape="circle" label="N53\n87"]
54 [shape="diamond" label="N54\n86"]
55 [shape="circle" label="N55\n85"]
56 [shape="circle" label="N56\n84"]
57 [shape="circle" label="N57\n83"]
152 [shape="circle" label="N152\n12"]
154 [shape="diamond" label="N154\n11"]
157 [shape="circle" label="N157\n7"]
160 [shape="diamond" label="N160\n5"]
184 [shape="circle" label="N184\n0"]
161 [shape="circle" label="N161\n4"]
162 [shape="circle" label="N162\n3"]
163 [shape="circle" label="N163\n2"]
164 [shape="diamond" label="N164\n1"]
185 [shape="circle" label="N185\n0"]
165 [shape="circle" label="N165\n0"]
159 [shape="diamond" label="N159\n10"]
158 [shape="diamond" label="N158\n9"]
155 [shape="diamond" label="N155\n8"]
156 [shape="circle" label="N156\n6"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
11 -> 12 [label="Function start dummy edge"]
12 -> 14 [label="[cond == 0]"]
12 -> 13 [label="[!(cond == 0)]"]
13 -> 10 [label="return;"]
14 -> 15 [label="Label: ERROR"]
15 -> 16 [label="reach_error();" style="dotted" arrowhead="empty"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
}
subgraph cluster_main {
label="main()"
141 -> 171 [label="INIT GLOBAL VARS"]
171 -> 172 [label="void abort();"]
172 -> 173 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
173 -> 174 [label="void reach_error();"]
174 -> 175 [label="void assume_abort_if_not(int cond);"]
175 -> 176 [label="void __VERIFIER_assert(int cond);"]
176 -> 177 [label="void __VERIFIER_assume(int);"]
177 -> 178 [label="int __VERIFIER_nondet_int();"]
178 -> 179 [label="unsigned int __VERIFIER_nondet_uint();"]
179 -> 180 [label="unsigned int mp_add(unsigned int a, unsigned int b);"]
180 -> 181 [label="int main();"]
181 -> 142 [label="Function start dummy edge"]
142 -> 143 [label="int a;"]
143 -> 144 [label="int b;"]
144 -> 145 [label="int r;"]
145 -> 146 [label="int A[2048] = { 0 };"]
146 -> 147 [label="int B[2048] = { 0 };"]
147 -> 148 [label="int i;"]
148 -> 149 [label="int tmp;"]
149 -> 150 [label="i = 0;"]
150 -> 151 [label="while"]
151 -> 152 [label="[i < 2048]"]
151 -> 153 [label="[!(i < 2048)]"]
153 -> 166 [label="a = __VERIFIER_nondet_uint();"]
166 -> 167 [label="b = 234770789;"]
167 -> 168 [label="r = mp_add(a, b);" style="dotted" arrowhead="empty"]
168 -> 169 [label="__VERIFIER_assert(r == (a + b));" style="dotted" arrowhead="empty"]
170 -> 140 [label="default return"]
169 -> 170 [label="__VERIFIER_assert((A[1024]) == (B[1024]));" style="dotted" arrowhead="empty"]
152 -> 154 [label="int __CPAchecker_TMP_0;"]
154 -> 159 [label="[i >= 0]"]
154 -> 157 [label="[!(i >= 0)]"]
157 -> 160 [label="__CPAchecker_TMP_0 = 0;"]
160 -> 161 [label="[__CPAchecker_TMP_0 != 0]"]
160 -> 184 [label="[!(__CPAchecker_TMP_0 != 0)]"]
161 -> 162 [label="tmp = A[i];"]
162 -> 163 [label="B[i] = tmp;"]
163 -> 164 [label="i = i + 1;"]
164 -> 165 [label="[i >= 2048]"]
164 -> 185 [label="[!(i >= 2048)]"]
165 -> 151 [label=""]
159 -> 158 [label="[i < 2048]"]
159 -> 157 [label="[!(i < 2048)]"]
158 -> 155 [label="[(A[i]) == 0]"]
158 -> 157 [label="[!((A[i]) == 0)]"]
155 -> 156 [label="[(B[i]) == 0]"]
155 -> 157 [label="[!((B[i]) == 0)]"]
156 -> 160 [label="__CPAchecker_TMP_0 = 1;"]}
subgraph cluster_mp_add {
label="mp_add()"
20 -> 21 [label="Function start dummy edge"]
21 -> 22 [label="unsigned char a0;"]
22 -> 23 [label="unsigned char a1;"]
23 -> 24 [label="unsigned char a2;"]
24 -> 25 [label="unsigned char a3;"]
25 -> 26 [label="unsigned char b0;"]
26 -> 27 [label="unsigned char b1;"]
27 -> 28 [label="unsigned char b2;"]
28 -> 29 [label="unsigned char b3;"]
29 -> 30 [label="unsigned char r0;"]
30 -> 31 [label="unsigned char r1;"]
31 -> 32 [label="unsigned char r2;"]
32 -> 33 [label="unsigned char r3;"]
33 -> 34 [label="unsigned short carry;"]
34 -> 35 [label="unsigned short partial_sum;"]
35 -> 36 [label="unsigned int r;"]
36 -> 37 [label="unsigned char i;"]
37 -> 38 [label="unsigned char na;"]
38 -> 39 [label="unsigned char nb;"]
39 -> 40 [label="a0 = a;"]
40 -> 41 [label="a1 = a >> 8;"]
41 -> 42 [label="a2 = a >> 16U;"]
42 -> 43 [label="a3 = a >> 24U;"]
43 -> 44 [label="b0 = b;"]
44 -> 45 [label="b1 = b >> 8U;"]
45 -> 46 [label="b2 = b >> 16U;"]
46 -> 47 [label="b3 = b >> 24U;"]
47 -> 48 [label="na = 4U;"]
48 -> 50 [label="[a3 == 0U]"]
48 -> 49 [label="[!(a3 == 0U)]"]
49 -> 58 [label="nb = 4U;"]
58 -> 60 [label="[b3 == 0U]"]
58 -> 59 [label="[!(b3 == 0U)]"]
59 -> 68 [label="carry = 0U;"]
68 -> 69 [label="i = 0U;"]
69 -> 70 [label="while"]
70 -> 71 [label="[i < na]"]
70 -> 74 [label="[!(i < na)]"]
74 -> 71 [label="[i < nb]"]
74 -> 73 [label="[!(i < nb)]"]
73 -> 71 [label="[carry != 0U]"]
73 -> 72 [label="[!(carry != 0U)]"]
72 -> 122 [label="while"]
122 -> 123 [label="[i < 4U]"]
122 -> 124 [label="[!(i < 4U)]"]
124 -> 138 [label="r = ((r0 | (r1 << 8U)) | (r2 << 16U)) | (((unsigned int)r3) << 24U);"]
138 -> 19 [label="return r;"]
123 -> 126 [label="[i == 0U]"]
123 -> 125 [label="[!(i == 0U)]"]
125 -> 129 [label="[i == 1U]"]
125 -> 128 [label="[!(i == 1U)]"]
128 -> 132 [label="[i == 2U]"]
128 -> 131 [label="[!(i == 2U)]"]
131 -> 135 [label="[i == 3U]"]
131 -> 134 [label="[!(i == 3U)]"]
134 -> 137 [label="i = i + 1U;"]
137 -> 122 [label=""]
135 -> 136 [label="r3 = 0U;"]
136 -> 134 [label=""]
132 -> 133 [label="r2 = 0U;"]
133 -> 131 [label=""]
129 -> 130 [label="r1 = 0U;"]
130 -> 128 [label=""]
126 -> 127 [label="r0 = 0U;"]
127 -> 125 [label=""]
71 -> 75 [label="partial_sum = carry;"]
75 -> 76 [label="carry = 0U;"]
76 -> 78 [label="[i < na]"]
76 -> 77 [label="[!(i < na)]"]
77 -> 92 [label="[i < nb]"]
77 -> 91 [label="[!(i < nb)]"]
91 -> 106 [label="[partial_sum > 255U]"]
91 -> 105 [label="[!(partial_sum > 255U)]"]
105 -> 110 [label="[i == 0U]"]
105 -> 109 [label="[!(i == 0U)]"]
109 -> 113 [label="[i == 1U]"]
109 -> 112 [label="[!(i == 1U)]"]
112 -> 116 [label="[i == 2U]"]
112 -> 115 [label="[!(i == 2U)]"]
115 -> 119 [label="[i == 3U]"]
115 -> 118 [label="[!(i == 3U)]"]
118 -> 121 [label="i = i + 1U;"]
121 -> 70 [label=""]
119 -> 120 [label="r3 = (unsigned char)partial_sum;"]
120 -> 118 [label=""]
116 -> 117 [label="r2 = (unsigned char)partial_sum;"]
117 -> 115 [label=""]
113 -> 114 [label="r1 = (unsigned char)partial_sum;"]
114 -> 112 [label=""]
110 -> 111 [label="r0 = (unsigned char)partial_sum;"]
111 -> 109 [label=""]
106 -> 107 [label="partial_sum = partial_sum & 255U;"]
107 -> 108 [label="carry = 1U;"]
108 -> 105 [label=""]
92 -> 94 [label="[i == 0U]"]
92 -> 93 [label="[!(i == 0U)]"]
93 -> 97 [label="[i == 1U]"]
93 -> 96 [label="[!(i == 1U)]"]
96 -> 100 [label="[i == 2U]"]
96 -> 99 [label="[!(i == 2U)]"]
99 -> 103 [label="[i == 3U]"]
99 -> 102 [label="[!(i == 3U)]"]
102 -> 91 [label=""]
103 -> 104 [label="partial_sum = partial_sum + b3;"]
104 -> 91 [label=""]
100 -> 101 [label="partial_sum = partial_sum + b2;"]
101 -> 99 [label=""]
97 -> 98 [label="partial_sum = partial_sum + b1;"]
98 -> 96 [label=""]
94 -> 95 [label="partial_sum = partial_sum + b0;"]
95 -> 93 [label=""]
78 -> 80 [label="[i == 0U]"]
78 -> 79 [label="[!(i == 0U)]"]
79 -> 83 [label="[i == 1U]"]
79 -> 82 [label="[!(i == 1U)]"]
82 -> 86 [label="[i == 2U]"]
82 -> 85 [label="[!(i == 2U)]"]
85 -> 89 [label="[i == 3U]"]
85 -> 88 [label="[!(i == 3U)]"]
88 -> 77 [label=""]
89 -> 90 [label="partial_sum = partial_sum + a3;"]
90 -> 77 [label=""]
86 -> 87 [label="partial_sum = partial_sum + a2;"]
87 -> 85 [label=""]
83 -> 84 [label="partial_sum = partial_sum + a1;"]
84 -> 82 [label=""]
80 -> 81 [label="partial_sum = partial_sum + a0;"]
81 -> 79 [label=""]
60 -> 61 [label="nb = nb - 1;"]
61 -> 63 [label="[b2 == 0U]"]
61 -> 62 [label="[!(b2 == 0U)]"]
62 -> 59 [label=""]
63 -> 64 [label="nb = nb - 1;"]
64 -> 66 [label="[b1 == 0U]"]
64 -> 65 [label="[!(b1 == 0U)]"]
65 -> 59 [label=""]
66 -> 67 [label="nb = nb - 1;"]
67 -> 59 [label=""]
50 -> 51 [label="na = na - 1;"]
51 -> 53 [label="[a2 == 0U]"]
51 -> 52 [label="[!(a2 == 0U)]"]
52 -> 49 [label=""]
53 -> 54 [label="na = na - 1;"]
54 -> 56 [label="[a1 == 0U]"]
54 -> 55 [label="[!(a1 == 0U)]"]
55 -> 49 [label=""]
56 -> 57 [label="na = na - 1;"]
57 -> 49 [label=""]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 186 [label="__assert_fail(\"0\", \"loop-simple-no-abs.c\", 3, \"reach_error\");"]}
167 -> 20 [label="mp_add(a, b)"]
19 -> 168 [label="Return edge from mp_add to main: r = mp_add(a, b);"]
168 -> 11 [label="__VERIFIER_assert(r == (a + b))"]
10 -> 169 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(r == (a + b));"]
10 -> 170 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert((A[1024]) == (B[1024]));"]
169 -> 11 [label="__VERIFIER_assert((A[1024]) == (B[1024]))"]
15 -> 1 [label="reach_error()"]}