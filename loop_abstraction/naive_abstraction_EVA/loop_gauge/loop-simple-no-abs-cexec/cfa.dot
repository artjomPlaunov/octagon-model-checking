digraph CFA {
20 [shape="circle" label="N20\n51"]
61 [shape="circle" label="N61\n50"]
62 [shape="circle" label="N62\n49"]
63 [shape="circle" label="N63\n48"]
64 [shape="circle" label="N64\n47"]
65 [shape="circle" label="N65\n46"]
66 [shape="circle" label="N66\n45"]
67 [shape="circle" label="N67\n44"]
68 [shape="circle" label="N68\n43"]
69 [shape="circle" label="N69\n42"]
70 [shape="circle" label="N70\n41"]
21 [shape="circle" label="N21\n40"]
22 [shape="circle" label="N22\n39"]
23 [shape="circle" label="N23\n38"]
24 [shape="diamond" label="N24\n37"]
25 [shape="diamond" label="N25\n36"]
27 [shape="circle" label="N27\n35"]
28 [shape="diamond" label="N28\n33"]
73 [shape="circle" label="N73\n0"]
29 [shape="circle" label="N29\n32"]
30 [shape="circle" label="N30\n31"]
31 [shape="circle" label="N31\n30"]
32 [shape="circle" label="N32\n29"]
33 [shape="circle" label="N33\n28"]
34 [shape="circle" label="N34\n27"]
35 [shape="diamond" label="N35\n26"]
38 [shape="circle" label="N38\n24"]
39 [shape="diamond" label="N39\n22"]
74 [shape="circle" label="N74\n0"]
40 [shape="circle" label="N40\n21"]
41 [shape="circle" label="N41\n20"]
42 [shape="circle" label="N42\n19"]
43 [shape="circle" label="N43\n18"]
44 [shape="doublecircle" label="N44\n17"]
46 [shape="circle" label="N46\n16"]
55 [shape="diamond" label="N55\n15"]
58 [shape="circle" label="N58\n13"]
59 [shape="circle" label="N59\n11"]
11 [shape="circle" label="N11\n7"]
12 [shape="diamond" label="N12\n6"]
13 [shape="circle" label="N13\n1"]
10 [shape="circle" label="N10\n0"]
60 [shape="circle" label="N60\n10"]
19 [shape="circle" label="N19\n9"]
14 [shape="circle" label="N14\n5"]
15 [shape="circle" label="N15\n4"]
1 [shape="circle" label="N1\n3"]
2 [shape="circle" label="N2\n2"]
75 [shape="circle" label="N75\n0"]
16 [shape="circle" label="N16\n3"]
56 [shape="diamond" label="N56\n14"]
57 [shape="circle" label="N57\n12"]
45 [shape="circle" label="N45\n8"]
47 [shape="circle" label="N47\n7"]
48 [shape="diamond" label="N48\n6"]
50 [shape="circle" label="N50\n5"]
52 [shape="circle" label="N52\n4"]
49 [shape="circle" label="N49\n1"]
54 [shape="circle" label="N54\n0"]
51 [shape="circle" label="N51\n3"]
53 [shape="circle" label="N53\n2"]
36 [shape="diamond" label="N36\n25"]
37 [shape="circle" label="N37\n23"]
26 [shape="circle" label="N26\n34"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
11 -> 12 [label="Function start dummy edge"]
12 -> 14 [label="[cond == 0]"]
12 -> 13 [label="[!(cond == 0)]"]
13 -> 10 [label="return;"]
14 -> 15 [label="Label: ERROR"]
15 -> 16 [label="reach_error();" style="dotted" arrowhead="empty"]}
subgraph cluster_assume_abort_if_not {
label="assume_abort_if_not()"
}
subgraph cluster_main {
label="main()"
20 -> 61 [label="INIT GLOBAL VARS"]
61 -> 62 [label="void abort();"]
62 -> 63 [label="void __assert_fail(const char *, const char *, unsigned int, const char *);"]
63 -> 64 [label="void reach_error();"]
64 -> 65 [label="void assume_abort_if_not(int cond);"]
65 -> 66 [label="void __VERIFIER_assert(int cond);"]
66 -> 67 [label="void __VERIFIER_assume(int);"]
67 -> 68 [label="int __VERIFIER_nondet_int();"]
68 -> 69 [label="unsigned int __VERIFIER_nondet_uint();"]
69 -> 70 [label="int main();"]
70 -> 21 [label="Function start dummy edge"]
21 -> 22 [label="int flag;"]
22 -> 23 [label="flag = __VERIFIER_nondet_int();"]
23 -> 24 [label="int __CPAchecker_TMP_0;"]
24 -> 26 [label="[flag == 0]"]
24 -> 25 [label="[!(flag == 0)]"]
25 -> 26 [label="[flag == 1]"]
25 -> 27 [label="[!(flag == 1)]"]
27 -> 28 [label="__CPAchecker_TMP_0 = 0;"]
28 -> 29 [label="[__CPAchecker_TMP_0 != 0]"]
28 -> 73 [label="[!(__CPAchecker_TMP_0 != 0)]"]
29 -> 30 [label="int i = 0;"]
30 -> 31 [label="int x = 0;"]
31 -> 32 [label="int y = 0;"]
32 -> 33 [label="int n;"]
33 -> 34 [label="n = __VERIFIER_nondet_int();"]
34 -> 35 [label="int __CPAchecker_TMP_1;"]
35 -> 36 [label="[n >= 1000]"]
35 -> 38 [label="[!(n >= 1000)]"]
38 -> 39 [label="__CPAchecker_TMP_1 = 0;"]
39 -> 40 [label="[__CPAchecker_TMP_1 != 0]"]
39 -> 74 [label="[!(__CPAchecker_TMP_1 != 0)]"]
40 -> 41 [label="unsigned int a;"]
41 -> 42 [label="unsigned int b;"]
42 -> 43 [label="unsigned int r;"]
43 -> 44 [label="while"]
44 -> 45 [label="[i < n]"]
44 -> 46 [label="[!(i < n)]"]
46 -> 55 [label="int __CPAchecker_TMP_2;"]
55 -> 56 [label="[x <= 3000003]"]
55 -> 58 [label="[!(x <= 3000003)]"]
58 -> 59 [label="__CPAchecker_TMP_2 = 0;"]
59 -> 60 [label="__VERIFIER_assert(__CPAchecker_TMP_2);" style="dotted" arrowhead="empty"]
60 -> 19 [label="default return"]
56 -> 57 [label="[y <= 2000002]"]
56 -> 58 [label="[!(y <= 2000002)]"]
57 -> 59 [label="__CPAchecker_TMP_2 = 1;"]
45 -> 47 [label="x = x;"]
47 -> 48 [label="y = y;"]
48 -> 51 [label="[flag == 0]"]
48 -> 50 [label="[!(flag == 0)]"]
50 -> 52 [label="x = x + 3;"]
52 -> 49 [label=""]
49 -> 54 [label="i = i + 1;"]
54 -> 44 [label=""]
51 -> 53 [label="y = y + 2;"]
53 -> 49 [label=""]
36 -> 37 [label="[n <= 1000000]"]
36 -> 38 [label="[!(n <= 1000000)]"]
37 -> 39 [label="__CPAchecker_TMP_1 = 1;"]
26 -> 28 [label="__CPAchecker_TMP_0 = 1;"]}
subgraph cluster_reach_error {
label="reach_error()"
1 -> 2 [label="Function start dummy edge"]
2 -> 75 [label="__assert_fail(\"0\", \"loop-simple-no-abs.c\", 3, \"reach_error\");"]}
59 -> 11 [label="__VERIFIER_assert(__CPAchecker_TMP_2)"]
10 -> 60 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(__CPAchecker_TMP_2);"]
15 -> 1 [label="reach_error()"]}