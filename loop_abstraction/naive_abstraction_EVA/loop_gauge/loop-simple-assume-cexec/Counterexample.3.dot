digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N20\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
44 [label="44 @ N67\nmain\n" id="44"]
45 [label="45 @ N24\nmain\n" id="45"]
50 [label="50 @ N26\nmain\n" id="50"]
53 [label="53 @ N28\nmain\n" id="53"]
54 [label="54 @ N29\nmain\n" id="54"]
56 [label="56 @ N35\nmain\n" id="56"]
61 [label="61 @ N38\nmain\n" id="61"]
64 [label="64 @ N39\nmain\n" id="64"]
65 [label="65 @ N40\nmain\n" id="65"]
67 [label="67 @ N43\nmain\n" id="67"]
88 [fillcolor="cornflowerblue" label="88 @ N44\nmain\nAbstractionState: ABS5\n" id="88"]
89 [label="89 @ N45\nmain\n" id="89"]
108 [label="108 @ N47\nmain\n" id="108"]
113 [label="113 @ N50\nmain\n" id="113"]
116 [label="116 @ N51\nmain\n" id="116"]
117 [label="117 @ N52\nmain\n" id="117"]
119 [label="119 @ N54\nmain\n" id="119"]
121 [label="121 @ N56\nmain\n" id="121"]
122 [label="122 @ N58\nmain\n" id="122"]
126 [label="126 @ N55\nmain\n" id="126"]
127 [label="127 @ N60\nmain\n" id="127"]
129 [fillcolor="cornflowerblue" label="129 @ N44\nmain\nAbstractionState: ABS7\n" id="129"]
131 [label="131 @ N46\nmain\n" id="131"]
132 [label="132 @ N61\nmain\n" id="132"]
137 [label="137 @ N64\nmain\n" id="137"]
140 [label="140 @ N65\nmain\n" id="140"]
141 [label="141 @ N11\n__VERIFIER_assert entry\n" id="141"]
142 [label="142 @ N12\n__VERIFIER_assert\n" id="142"]
143 [label="143 @ N14\n__VERIFIER_assert\n" id="143"]
146 [fillcolor="red" label="146 @ N15\n__VERIFIER_assert\nAbstractionState: ABS8\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="146"]
133 [label="133 @ N62\nmain\n" id="133"]
135 [label="135 @ N63\nmain\n" id="135"]
120 [label="120 @ N57\nmain\n" id="120"]
124 [label="124 @ N59\nmain\n" id="124"]
109 [label="109 @ N48\nmain\n" id="109"]
111 [label="111 @ N49\nmain\n" id="111"]
57 [label="57 @ N36\nmain\n" id="57"]
59 [label="59 @ N37\nmain\n" id="59"]
47 [label="47 @ N25\nmain\n" id="47"]
49 [label="49 @ N27\nmain\n" id="49"]
0 -> 44 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 44"]
44 -> 45 [color="red" label="Lines 7 - 26: \lvoid abort();\lvoid __assert_fail(const char *, const char *, unsigned int, const char *);\lvoid reach_error();\lvoid assume_abort_if_not(int cond);\lvoid __VERIFIER_assert(int cond);\lvoid __VERIFIER_assume(int);\lint __VERIFIER_nondet_int();\lunsigned int __VERIFIER_nondet_uint();\lint main();\lFunction start dummy edge\lint flag;\lflag = __VERIFIER_nondet_int();\lint __CPAchecker_TMP_0;\l" id="44 -> 45"]
45 -> 47 [color="red" label="Line 26: \l[!(flag == 0)]\l" id="45 -> 47"]
45 -> 50 [label="Line 26: \l[flag == 0]\l" id="45 -> 50"]
50 -> 53 [label="Line 0: \l__CPAchecker_TMP_0 = 1;\l" id="50 -> 53"]
53 -> 54 [color="red" label="Line 26: \l[__CPAchecker_TMP_0 != 0]\l" id="53 -> 54"]
53 -> 55 [label="Line 26: \l[!(__CPAchecker_TMP_0 != 0)]\l" id="53 -> 55"]
54 -> 56 [color="red" label="Lines 27 - 31: \lint i = 0;\lint x = 0;\lint y = 0;\lint n;\ln = __VERIFIER_nondet_int();\lint __CPAchecker_TMP_1;\l" id="54 -> 56"]
56 -> 57 [label="Line 31: \l[n >= 1000]\l" id="56 -> 57"]
56 -> 61 [color="red" label="Line 31: \l[!(n >= 1000)]\l" id="56 -> 61"]
61 -> 64 [color="red" label="Line 0: \l__CPAchecker_TMP_1 = 0;\l" id="61 -> 64"]
64 -> 65 [color="red" label="Line 31: \l[__CPAchecker_TMP_1 != 0]\l" id="64 -> 65"]
64 -> 66 [label="Line 31: \l[!(__CPAchecker_TMP_1 != 0)]\l" id="64 -> 66"]
65 -> 67 [color="red" label="Lines 33 - 33: \lunsigned int a;\lunsigned int b;\lunsigned int r;\l" id="65 -> 67"]
67 -> 88 [color="red" label="Line 35: \lwhile\l" id="67 -> 88"]
88 -> 89 [color="red" label="Line 35: \l[i < n]\l" id="88 -> 89"]
88 -> 90 [label="Line 35: \l[!(i < n)]\l" id="88 -> 90"]
89 -> 108 [color="red" label="Line 36: \lint __CPAchecker_TMP_2;\l" id="89 -> 108"]
108 -> 109 [label="Line 36: \l[x <= 3000000]\l" id="108 -> 109"]
108 -> 113 [color="red" label="Line 36: \l[!(x <= 3000000)]\l" id="108 -> 113"]
113 -> 116 [color="red" label="Line 0: \l__CPAchecker_TMP_2 = 0;\l" id="113 -> 116"]
116 -> 117 [color="red" label="Line 36: \l[__CPAchecker_TMP_2 != 0]\l" id="116 -> 117"]
116 -> 118 [label="Line 36: \l[!(__CPAchecker_TMP_2 != 0)]\l" id="116 -> 118"]
117 -> 119 [color="red" label="Lines 37 - 38: \lx = x;\ly = y;\l" id="117 -> 119"]
119 -> 120 [label="Line 39: \l[flag == 0]\l" id="119 -> 120"]
119 -> 121 [color="red" label="Line 39: \l[!(flag == 0)]\l" id="119 -> 121"]
121 -> 122 [color="red" label="Line 40: \lx = x + 3;\l" id="121 -> 122"]
122 -> 126 [color="red" label="Line 0: \l\l" id="122 -> 126"]
126 -> 127 [color="red" label="Line 44: \li = i + 1;\l" id="126 -> 127"]
127 -> 129 [color="red" label="Line 0: \l\l" id="127 -> 129"]
129 -> 130 [label="Line 35: \l[i < n]\l" id="129 -> 130"]
129 -> 131 [color="red" label="Line 35: \l[!(i < n)]\l" id="129 -> 131"]
131 -> 132 [color="red" label="Line 46: \lint __CPAchecker_TMP_3;\l" id="131 -> 132"]
132 -> 133 [label="Line 46: \l[x <= 3000003]\l" id="132 -> 133"]
132 -> 137 [color="red" label="Line 46: \l[!(x <= 3000003)]\l" id="132 -> 137"]
137 -> 140 [color="red" label="Line 0: \l__CPAchecker_TMP_3 = 0;\l" id="137 -> 140"]
140 -> 141 [color="red" label="Line 46: \l__VERIFIER_assert(__CPAchecker_TMP_3)\l" id="140 -> 141"]
141 -> 142 [color="red" label="Line 0: \lFunction start dummy edge\l" id="141 -> 142"]
142 -> 143 [color="red" label="Line 15: \l[cond == 0]\l" id="142 -> 143"]
142 -> 144 [label="Line 15: \l[!(cond == 0)]\l" id="142 -> 144"]
143 -> 146 [color="red" label="Line 16: \lLabel: ERROR\l" id="143 -> 146"]
133 -> 135 [label="Line 46: \l[y <= 2000002]\l" id="133 -> 135"]
133 -> 137 [label="Line 46: \l[!(y <= 2000002)]\l" id="133 -> 137"]
135 -> 140 [label="Line 0: \l__CPAchecker_TMP_3 = 1;\l" id="135 -> 140"]
120 -> 124 [label="Line 42: \ly = y + 2;\l" id="120 -> 124"]
124 -> 126 [label="Line 0: \l\l" id="124 -> 126"]
109 -> 111 [label="Line 36: \l[y <= 2000000]\l" id="109 -> 111"]
109 -> 113 [label="Line 36: \l[!(y <= 2000000)]\l" id="109 -> 113"]
111 -> 116 [label="Line 0: \l__CPAchecker_TMP_2 = 1;\l" id="111 -> 116"]
57 -> 59 [label="Line 31: \l[n <= 1000000]\l" id="57 -> 59"]
57 -> 61 [label="Line 31: \l[!(n <= 1000000)]\l" id="57 -> 61"]
59 -> 64 [label="Line 0: \l__CPAchecker_TMP_1 = 1;\l" id="59 -> 64"]
47 -> 49 [color="red" label="Line 26: \l[!(flag == 1)]\l" id="47 -> 49"]
47 -> 50 [label="Line 26: \l[flag == 1]\l" id="47 -> 50"]
49 -> 53 [color="red" label="Line 0: \l__CPAchecker_TMP_0 = 0;\l" id="49 -> 53"]
}
