digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N20\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
1 [label="1 @ N67\nmain\n" id="1"]
2 [label="2 @ N24\nmain\n" id="2"]
7 [label="7 @ N26\nmain\n" id="7"]
10 [label="10 @ N28\nmain\n" id="10"]
11 [label="11 @ N29\nmain\n" id="11"]
13 [label="13 @ N35\nmain\n" id="13"]
18 [label="18 @ N38\nmain\n" id="18"]
21 [label="21 @ N39\nmain\n" id="21"]
22 [label="22 @ N40\nmain\n" id="22"]
24 [label="24 @ N43\nmain\n" id="24"]
26 [fillcolor="cornflowerblue" label="26 @ N44\nmain\nAbstractionState: ABS1: true\n" id="26"]
28 [label="28 @ N46\nmain\n" id="28"]
29 [label="29 @ N61\nmain\n" id="29"]
34 [label="34 @ N64\nmain\n" id="34"]
37 [label="37 @ N65\nmain\n" id="37"]
38 [label="38 @ N11\n__VERIFIER_assert entry\n" id="38"]
39 [label="39 @ N12\n__VERIFIER_assert\n" id="39"]
40 [label="40 @ N14\n__VERIFIER_assert\n" id="40"]
43 [fillcolor="red" label="43 @ N15\n__VERIFIER_assert\nAbstractionState: ABS2: true\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="43"]
30 [label="30 @ N62\nmain\n" id="30"]
32 [label="32 @ N63\nmain\n" id="32"]
14 [label="14 @ N36\nmain\n" id="14"]
16 [label="16 @ N37\nmain\n" id="16"]
4 [label="4 @ N25\nmain\n" id="4"]
6 [label="6 @ N27\nmain\n" id="6"]
0 -> 1 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 1"]
1 -> 2 [color="red" label="Lines 7 - 26: \lvoid abort();\lvoid __assert_fail(const char *, const char *, unsigned int, const char *);\lvoid reach_error();\lvoid assume_abort_if_not(int cond);\lvoid __VERIFIER_assert(int cond);\lvoid __VERIFIER_assume(int);\lint __VERIFIER_nondet_int();\lunsigned int __VERIFIER_nondet_uint();\lint main();\lFunction start dummy edge\lint flag;\lflag = __VERIFIER_nondet_int();\lint __CPAchecker_TMP_0;\l" id="1 -> 2"]
2 -> 4 [color="red" label="Line 26: \l[!(flag == 0)]\l" id="2 -> 4"]
2 -> 7 [label="Line 26: \l[flag == 0]\l" id="2 -> 7"]
7 -> 10 [label="Line 0: \l__CPAchecker_TMP_0 = 1;\l" id="7 -> 10"]
10 -> 11 [color="red" label="Line 26: \l[__CPAchecker_TMP_0 != 0]\l" id="10 -> 11"]
10 -> 12 [label="Line 26: \l[!(__CPAchecker_TMP_0 != 0)]\l" id="10 -> 12"]
11 -> 13 [color="red" label="Lines 27 - 31: \lint i = 0;\lint x = 0;\lint y = 0;\lint n;\ln = __VERIFIER_nondet_int();\lint __CPAchecker_TMP_1;\l" id="11 -> 13"]
13 -> 14 [label="Line 31: \l[n >= 1000]\l" id="13 -> 14"]
13 -> 18 [color="red" label="Line 31: \l[!(n >= 1000)]\l" id="13 -> 18"]
18 -> 21 [color="red" label="Line 0: \l__CPAchecker_TMP_1 = 0;\l" id="18 -> 21"]
21 -> 22 [color="red" label="Line 31: \l[__CPAchecker_TMP_1 != 0]\l" id="21 -> 22"]
21 -> 23 [label="Line 31: \l[!(__CPAchecker_TMP_1 != 0)]\l" id="21 -> 23"]
22 -> 24 [color="red" label="Lines 33 - 33: \lunsigned int a;\lunsigned int b;\lunsigned int r;\l" id="22 -> 24"]
24 -> 26 [color="red" label="Line 35: \lwhile\l" id="24 -> 26"]
26 -> 27 [label="Line 35: \l[i < n]\l" id="26 -> 27"]
26 -> 28 [color="red" label="Line 35: \l[!(i < n)]\l" id="26 -> 28"]
28 -> 29 [color="red" label="Line 46: \lint __CPAchecker_TMP_3;\l" id="28 -> 29"]
29 -> 30 [label="Line 46: \l[x <= 3000003]\l" id="29 -> 30"]
29 -> 34 [color="red" label="Line 46: \l[!(x <= 3000003)]\l" id="29 -> 34"]
34 -> 37 [color="red" label="Line 0: \l__CPAchecker_TMP_3 = 0;\l" id="34 -> 37"]
37 -> 38 [color="red" label="Line 46: \l__VERIFIER_assert(__CPAchecker_TMP_3)\l" id="37 -> 38"]
38 -> 39 [color="red" label="Line 0: \lFunction start dummy edge\l" id="38 -> 39"]
39 -> 40 [color="red" label="Line 15: \l[cond == 0]\l" id="39 -> 40"]
39 -> 41 [label="Line 15: \l[!(cond == 0)]\l" id="39 -> 41"]
40 -> 43 [color="red" label="Line 16: \lLabel: ERROR\l" id="40 -> 43"]
30 -> 32 [label="Line 46: \l[y <= 2000002]\l" id="30 -> 32"]
30 -> 34 [label="Line 46: \l[!(y <= 2000002)]\l" id="30 -> 34"]
32 -> 37 [label="Line 0: \l__CPAchecker_TMP_3 = 1;\l" id="32 -> 37"]
14 -> 16 [label="Line 31: \l[n <= 1000000]\l" id="14 -> 16"]
14 -> 18 [label="Line 31: \l[!(n <= 1000000)]\l" id="14 -> 18"]
16 -> 21 [label="Line 0: \l__CPAchecker_TMP_1 = 1;\l" id="16 -> 21"]
4 -> 6 [color="red" label="Line 26: \l[!(flag == 1)]\l" id="4 -> 6"]
4 -> 7 [label="Line 26: \l[flag == 1]\l" id="4 -> 7"]
6 -> 10 [color="red" label="Line 0: \l__CPAchecker_TMP_0 = 0;\l" id="6 -> 10"]
}
