digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N141\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
1 [label="1 @ N186\nmain\n" id="1"]
2 [label="2 @ N145\nmain\n" id="2"]
7 [label="7 @ N147\nmain\n" id="7"]
10 [label="10 @ N149\nmain\n" id="10"]
11 [label="11 @ N150\nmain\n" id="11"]
13 [label="13 @ N156\nmain\n" id="13"]
18 [label="18 @ N159\nmain\n" id="18"]
21 [label="21 @ N160\nmain\n" id="21"]
22 [label="22 @ N161\nmain\n" id="22"]
24 [label="24 @ N164\nmain\n" id="24"]
26 [fillcolor="cornflowerblue" label="26 @ N165\nmain\nAbstractionState: ABS1: true\n" id="26"]
28 [label="28 @ N167\nmain\n" id="28"]
29 [label="29 @ N177\nmain\n" id="29"]
30 [label="30 @ N20\nmp_add entry\n" id="30"]
31 [label="31 @ N48\nmp_add\n" id="31"]
46 [label="46 @ N49\nmp_add\n" id="46"]
47 [label="47 @ N58\nmp_add\n" id="47"]
62 [label="62 @ N59\nmp_add\n" id="62"]
63 [label="63 @ N69\nmp_add\n" id="63"]
65 [fillcolor="cornflowerblue" label="65 @ N70\nmp_add\nAbstractionState: ABS2: true\n" id="65"]
67 [label="67 @ N74\nmp_add\n" id="67"]
69 [label="69 @ N73\nmp_add\n" id="69"]
72 [label="72 @ N72\nmp_add\n" id="72"]
75 [fillcolor="cornflowerblue" label="75 @ N122\nmp_add\nAbstractionState: ABS3: true\n" id="75"]
77 [label="77 @ N124\nmp_add\n" id="77"]
78 [label="78 @ N138\nmp_add\n" id="78"]
79 [label="79 @ N19\nmp_add exit\n" id="79"]
80 [label="80 @ N178\nmain\n" id="80"]
181 [label="181 @ N11\n__VERIFIER_assert entry\n" id="181"]
182 [label="182 @ N12\n__VERIFIER_assert\n" id="182"]
183 [label="183 @ N14\n__VERIFIER_assert\n" id="183"]
186 [fillcolor="red" label="186 @ N15\n__VERIFIER_assert\nAbstractionState: ABS6: true\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="186"]
48 [label="48 @ N60\nmp_add\n" id="48"]
50 [label="50 @ N61\nmp_add\n" id="50"]
52 [label="52 @ N62\nmp_add\n" id="52"]
51 [label="51 @ N63\nmp_add\n" id="51"]
55 [label="55 @ N64\nmp_add\n" id="55"]
57 [label="57 @ N65\nmp_add\n" id="57"]
56 [label="56 @ N66\nmp_add\n" id="56"]
60 [label="60 @ N67\nmp_add\n" id="60"]
32 [label="32 @ N50\nmp_add\n" id="32"]
34 [label="34 @ N51\nmp_add\n" id="34"]
36 [label="36 @ N52\nmp_add\n" id="36"]
35 [label="35 @ N53\nmp_add\n" id="35"]
39 [label="39 @ N54\nmp_add\n" id="39"]
41 [label="41 @ N55\nmp_add\n" id="41"]
40 [label="40 @ N56\nmp_add\n" id="40"]
44 [label="44 @ N57\nmp_add\n" id="44"]
14 [label="14 @ N157\nmain\n" id="14"]
16 [label="16 @ N158\nmain\n" id="16"]
4 [label="4 @ N146\nmain\n" id="4"]
6 [label="6 @ N148\nmain\n" id="6"]
0 -> 1 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 1"]
1 -> 2 [color="red" label="Lines 7 - 108: \lvoid abort();\lvoid __assert_fail(const char *, const char *, unsigned int, const char *);\lvoid reach_error();\lvoid assume_abort_if_not(int cond);\lvoid __VERIFIER_assert(int cond);\lvoid __VERIFIER_assume(int);\lint __VERIFIER_nondet_int();\lunsigned int __VERIFIER_nondet_uint();\lunsigned int mp_add(unsigned int a, unsigned int b);\lint main();\lFunction start dummy edge\lint flag;\lflag = __VERIFIER_nondet_int();\lint __CPAchecker_TMP_0;\l" id="1 -> 2"]
2 -> 4 [color="red" label="Line 108: \l[!(flag == 0)]\l" id="2 -> 4"]
2 -> 7 [label="Line 108: \l[flag == 0]\l" id="2 -> 7"]
7 -> 10 [label="Line 0: \l__CPAchecker_TMP_0 = 1;\l" id="7 -> 10"]
10 -> 11 [color="red" label="Line 108: \l[__CPAchecker_TMP_0 != 0]\l" id="10 -> 11"]
10 -> 12 [label="Line 108: \l[!(__CPAchecker_TMP_0 != 0)]\l" id="10 -> 12"]
11 -> 13 [color="red" label="Lines 109 - 113: \lint i = 0;\lint x = 0;\lint y = 0;\lint n;\ln = __VERIFIER_nondet_int();\lint __CPAchecker_TMP_1;\l" id="11 -> 13"]
13 -> 14 [label="Line 113: \l[n >= 1000]\l" id="13 -> 14"]
13 -> 18 [color="red" label="Line 113: \l[!(n >= 1000)]\l" id="13 -> 18"]
18 -> 21 [color="red" label="Line 0: \l__CPAchecker_TMP_1 = 0;\l" id="18 -> 21"]
21 -> 22 [color="red" label="Line 113: \l[__CPAchecker_TMP_1 != 0]\l" id="21 -> 22"]
21 -> 23 [label="Line 113: \l[!(__CPAchecker_TMP_1 != 0)]\l" id="21 -> 23"]
22 -> 24 [color="red" label="Lines 115 - 115: \lunsigned int a;\lunsigned int b;\lunsigned int r;\l" id="22 -> 24"]
24 -> 26 [color="red" label="Line 117: \lwhile\l" id="24 -> 26"]
26 -> 27 [label="Line 117: \l[i < n]\l" id="26 -> 27"]
26 -> 28 [color="red" label="Line 117: \l[!(i < n)]\l" id="26 -> 28"]
28 -> 29 [color="red" label="Lines 130 - 131: \la = __VERIFIER_nondet_uint();\lb = 234770789;\l" id="28 -> 29"]
29 -> 30 [color="red" label="Line 132: \lmp_add(a, b)\l" id="29 -> 30"]
30 -> 31 [color="red" label="Lines 0 - 43: \lFunction start dummy edge\lunsigned char a0;\lunsigned char a1;\lunsigned char a2;\lunsigned char a3;\lunsigned char b0;\lunsigned char b1;\lunsigned char b2;\lunsigned char b3;\lunsigned char r0;\lunsigned char r1;\lunsigned char r2;\lunsigned char r3;\lunsigned short carry;\lunsigned short partial_sum;\lunsigned int r;\lunsigned char i;\lunsigned char na;\lunsigned char nb;\la0 = a;\la1 = a >> 8;\la2 = a >> 16U;\la3 = a >> 24U;\lb0 = b;\lb1 = b >> 8U;\lb2 = b >> 16U;\lb3 = b >> 24U;\lna = 4U;\l" id="30 -> 31"]
31 -> 32 [label="Line 44: \l[a3 == 0U]\l" id="31 -> 32"]
31 -> 46 [color="red" label="Line 44: \l[!(a3 == 0U)]\l" id="31 -> 46"]
46 -> 47 [color="red" label="Line 53: \lnb = 4U;\l" id="46 -> 47"]
47 -> 48 [label="Line 54: \l[b3 == 0U]\l" id="47 -> 48"]
47 -> 62 [color="red" label="Line 54: \l[!(b3 == 0U)]\l" id="47 -> 62"]
62 -> 63 [color="red" label="Lines 63 - 64: \lcarry = 0U;\li = 0U;\l" id="62 -> 63"]
63 -> 65 [color="red" label="Line 65: \lwhile\l" id="63 -> 65"]
65 -> 67 [color="red" label="Line 65: \l[!(i < na)]\l" id="65 -> 67"]
65 -> 73 [label="Line 65: \l[i < na]\l" id="65 -> 73"]
67 -> 69 [color="red" label="Line 65: \l[!(i < nb)]\l" id="67 -> 69"]
67 -> 73 [label="Line 65: \l[i < nb]\l" id="67 -> 73"]
69 -> 72 [color="red" label="Line 65: \l[!(carry != 0U)]\l" id="69 -> 72"]
69 -> 73 [label="Line 65: \l[carry != 0U]\l" id="69 -> 73"]
72 -> 75 [color="red" label="Line 92: \lwhile\l" id="72 -> 75"]
75 -> 76 [label="Line 92: \l[i < 4U]\l" id="75 -> 76"]
75 -> 77 [color="red" label="Line 92: \l[!(i < 4U)]\l" id="75 -> 77"]
77 -> 78 [color="red" label="Line 101: \lr = ((r0 | (r1 << 8U)) | (r2 << 16U)) | (((unsigned int)r3) << 24U);\l" id="77 -> 78"]
78 -> 79 [color="red" label="Line 103: \lreturn r;\l" id="78 -> 79"]
79 -> 80 [color="red" label="Line 132: \lReturn edge from mp_add to main: r = mp_add(a, b);\l" id="79 -> 80"]
80 -> 181 [color="red" label="Line 134: \l__VERIFIER_assert(r == (a + b))\l" id="80 -> 181"]
181 -> 182 [color="red" label="Line 0: \lFunction start dummy edge\l" id="181 -> 182"]
182 -> 183 [color="red" label="Line 15: \l[cond == 0]\l" id="182 -> 183"]
182 -> 184 [label="Line 15: \l[!(cond == 0)]\l" id="182 -> 184"]
183 -> 186 [color="red" label="Line 16: \lLabel: ERROR\l" id="183 -> 186"]
48 -> 50 [label="Line 55: \lnb = nb - 1;\l" id="48 -> 50"]
50 -> 51 [label="Line 56: \l[b2 == 0U]\l" id="50 -> 51"]
50 -> 52 [label="Line 56: \l[!(b2 == 0U)]\l" id="50 -> 52"]
52 -> 62 [label="Line 0: \l\l" id="52 -> 62"]
51 -> 55 [label="Line 57: \lnb = nb - 1;\l" id="51 -> 55"]
55 -> 56 [label="Line 58: \l[b1 == 0U]\l" id="55 -> 56"]
55 -> 57 [label="Line 58: \l[!(b1 == 0U)]\l" id="55 -> 57"]
57 -> 62 [label="Line 0: \l\l" id="57 -> 62"]
56 -> 60 [label="Line 59: \lnb = nb - 1;\l" id="56 -> 60"]
60 -> 62 [label="Line 0: \l\l" id="60 -> 62"]
32 -> 34 [label="Line 45: \lna = na - 1;\l" id="32 -> 34"]
34 -> 35 [label="Line 46: \l[a2 == 0U]\l" id="34 -> 35"]
34 -> 36 [label="Line 46: \l[!(a2 == 0U)]\l" id="34 -> 36"]
36 -> 46 [label="Line 0: \l\l" id="36 -> 46"]
35 -> 39 [label="Line 47: \lna = na - 1;\l" id="35 -> 39"]
39 -> 40 [label="Line 48: \l[a1 == 0U]\l" id="39 -> 40"]
39 -> 41 [label="Line 48: \l[!(a1 == 0U)]\l" id="39 -> 41"]
41 -> 46 [label="Line 0: \l\l" id="41 -> 46"]
40 -> 44 [label="Line 49: \lna = na - 1;\l" id="40 -> 44"]
44 -> 46 [label="Line 0: \l\l" id="44 -> 46"]
14 -> 16 [label="Line 113: \l[n <= 1000000]\l" id="14 -> 16"]
14 -> 18 [label="Line 113: \l[!(n <= 1000000)]\l" id="14 -> 18"]
16 -> 21 [label="Line 0: \l__CPAchecker_TMP_1 = 1;\l" id="16 -> 21"]
4 -> 6 [color="red" label="Line 108: \l[!(flag == 1)]\l" id="4 -> 6"]
4 -> 7 [label="Line 108: \l[flag == 1]\l" id="4 -> 7"]
6 -> 10 [color="red" label="Line 0: \l__CPAchecker_TMP_0 = 0;\l" id="6 -> 10"]
}
