digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N8\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
36 [label="36 @ N52\nmain\n" id="36"]
37 [label="37 @ N12\nmain\n" id="37"]
39 [label="39 @ N15\nmain\n" id="39"]
41 [label="41 @ N13\nmain\n" id="41"]
43 [label="43 @ N18\nmain\n" id="43"]
72 [fillcolor="cornflowerblue" label="72 @ N19\nmain\nAbstractionState: ABS7\n" id="72"]
74 [label="74 @ N21\nmain\n" id="74"]
75 [label="75 @ N31\nmain\n" id="75"]
77 [fillcolor="cornflowerblue" label="77 @ N32\nmain\nAbstractionState: ABS8\n" id="77"]
78 [label="78 @ N33\nmain\n" id="78"]
101 [label="101 @ N37\nmain\n" id="101"]
103 [label="103 @ N39\nmain\n" id="103"]
110 [label="110 @ N35\nmain\n" id="110"]
111 [label="111 @ N1\n__VERIFIER_assert entry\n" id="111"]
112 [label="112 @ N2\n__VERIFIER_assert\n" id="112"]
114 [label="114 @ N3\n__VERIFIER_assert\n" id="114"]
116 [label="116 @ N0\n__VERIFIER_assert exit\n" id="116"]
117 [label="117 @ N42\nmain\n" id="117"]
118 [label="118 @ N43\nmain\n" id="118"]
120 [fillcolor="cornflowerblue" label="120 @ N32\nmain\nAbstractionState: ABS11\n" id="120"]
122 [label="122 @ N34\nmain\n" id="122"]
123 [label="123 @ N44\nmain\n" id="123"]
124 [label="124 @ N45\nmain\n" id="124"]
129 [label="129 @ N48\nmain\n" id="129"]
132 [label="132 @ N49\nmain\n" id="132"]
133 [label="133 @ N50\nmain\n" id="133"]
135 [label="135 @ N1\n__VERIFIER_assert entry\n" id="135"]
136 [label="136 @ N2\n__VERIFIER_assert\n" id="136"]
137 [label="137 @ N4\n__VERIFIER_assert\n" id="137"]
140 [fillcolor="red" label="140 @ N5\n__VERIFIER_assert\nAbstractionState: ABS12\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="140"]
125 [label="125 @ N46\nmain\n" id="125"]
127 [label="127 @ N47\nmain\n" id="127"]
102 [label="102 @ N40\nmain\n" id="102"]
105 [label="105 @ N41\nmain\n" id="105"]
100 [label="100 @ N36\nmain\n" id="100"]
108 [label="108 @ N38\nmain\n" id="108"]
0 -> 36 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 36"]
36 -> 37 [color="red" label="Lines 7 - 88: \lvoid abort();\lvoid __VERIFIER_assert(int cond);\lint __VERIFIER_nondet_int();\lvoid __VERIFIER_assume(int);\lint main();\lFunction start dummy edge\lint x = 0;\lint n;\ln = __VERIFIER_nondet_int();\l" id="36 -> 37"]
37 -> 39 [color="red" label="Line 89: \l[!(n < 100)]\l" id="37 -> 39"]
37 -> 42 [label="Line 89: \l[n < 100]\l" id="37 -> 42"]
39 -> 41 [color="red" label="Line 89: \l[!(n > 1000000)]\l" id="39 -> 41"]
39 -> 42 [label="Line 89: \l[n > 1000000]\l" id="39 -> 42"]
41 -> 43 [color="red" label="Lines 91 - 92: \lint y = n;\lint runtime_div;\l" id="41 -> 43"]
43 -> 72 [color="red" label="Line 94: \lwhile\l" id="43 -> 72"]
72 -> 73 [label="Line 94: \l[(x + y) <= 999999]\l" id="72 -> 73"]
72 -> 74 [color="red" label="Line 94: \l[!((x + y) <= 999999)]\l" id="72 -> 74"]
74 -> 75 [color="red" label="Line 102: \lint i = x + y;\l" id="74 -> 75"]
75 -> 77 [color="red" label="Line 103: \lwhile\l" id="75 -> 77"]
77 -> 78 [color="red" label="Line 103: \l[(x + y) > 0]\l" id="77 -> 78"]
77 -> 79 [label="Line 103: \l[!((x + y) > 0)]\l" id="77 -> 79"]
78 -> 100 [label="Line 105: \l[x > 0]\l" id="78 -> 100"]
78 -> 101 [color="red" label="Line 105: \l[!(x > 0)]\l" id="78 -> 101"]
101 -> 102 [label="Line 107: \l[y > 0]\l" id="101 -> 102"]
101 -> 103 [color="red" label="Line 107: \l[!(y > 0)]\l" id="101 -> 103"]
103 -> 110 [color="red" label="Line 0: \l\l" id="103 -> 110"]
110 -> 111 [color="red" label="Line 110: \l__VERIFIER_assert((i + 1) <= 2147483647)\l" id="110 -> 111"]
111 -> 112 [color="red" label="Line 0: \lFunction start dummy edge\l" id="111 -> 112"]
112 -> 113 [label="Line 9: \l[cond == 0]\l" id="112 -> 113"]
112 -> 114 [color="red" label="Line 9: \l[!(cond == 0)]\l" id="112 -> 114"]
114 -> 116 [color="red" label="Line 0: \ldefault return\l" id="114 -> 116"]
116 -> 117 [color="red" label="Line 110: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((i + 1) <= 2147483647);\l" id="116 -> 117"]
117 -> 118 [color="red" label="Line 111: \li = i + 1;\l" id="117 -> 118"]
118 -> 120 [color="red" label="Line 0: \l\l" id="118 -> 120"]
120 -> 121 [label="Line 103: \l[(x + y) > 0]\l" id="120 -> 121"]
120 -> 122 [color="red" label="Line 103: \l[!((x + y) > 0)]\l" id="120 -> 122"]
122 -> 123 [color="red" label="Line 113: \lLabel: __FRAMAC_OCTAGON8\l" id="122 -> 123"]
123 -> 124 [color="red" label="Line 116: \lint __CPAchecker_TMP_2;\l" id="123 -> 124"]
124 -> 125 [label="Line 116: \l[100 <= (x + n)]\l" id="124 -> 125"]
124 -> 129 [color="red" label="Line 116: \l[!(100 <= (x + n))]\l" id="124 -> 129"]
129 -> 132 [color="red" label="Line 0: \l__CPAchecker_TMP_2 = 0;\l" id="129 -> 132"]
132 -> 133 [color="red" label="Line 116: \l[__CPAchecker_TMP_2 != 0]\l" id="132 -> 133"]
132 -> 134 [label="Line 116: \l[!(__CPAchecker_TMP_2 != 0)]\l" id="132 -> 134"]
133 -> 135 [color="red" label="Line 119: \l__VERIFIER_assert((((2 * x) + y) + n) >= 100)\l" id="133 -> 135"]
135 -> 136 [color="red" label="Line 0: \lFunction start dummy edge\l" id="135 -> 136"]
136 -> 137 [color="red" label="Line 9: \l[cond == 0]\l" id="136 -> 137"]
136 -> 138 [label="Line 9: \l[!(cond == 0)]\l" id="136 -> 138"]
137 -> 140 [color="red" label="Line 10: \lLabel: ERROR\l" id="137 -> 140"]
125 -> 127 [label="Line 116: \l[(x + n) <= 2147483647]\l" id="125 -> 127"]
125 -> 129 [label="Line 116: \l[!((x + n) <= 2147483647)]\l" id="125 -> 129"]
127 -> 132 [label="Line 0: \l__CPAchecker_TMP_2 = 1;\l" id="127 -> 132"]
102 -> 105 [label="Line 108: \ly = y - 1;\l" id="102 -> 105"]
105 -> 110 [label="Line 0: \l\l" id="105 -> 110"]
100 -> 108 [label="Line 106: \lx = x - 1;\l" id="100 -> 108"]
108 -> 110 [label="Line 0: \l\l" id="108 -> 110"]
}
