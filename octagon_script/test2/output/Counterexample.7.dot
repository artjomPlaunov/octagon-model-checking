digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N8\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
25 [label="25 @ N46\nmain\n" id="25"]
26 [label="26 @ N12\nmain\n" id="26"]
28 [label="28 @ N15\nmain\n" id="28"]
30 [label="30 @ N13\nmain\n" id="30"]
32 [label="32 @ N18\nmain\n" id="32"]
695 [fillcolor="cornflowerblue" label="695 @ N19\nmain\nAbstractionState: ABS79\n" id="695"]
696 [label="696 @ N20\nmain\n" id="696"]
861 [label="861 @ N1\n__VERIFIER_assert entry\n" id="861"]
862 [label="862 @ N2\n__VERIFIER_assert\n" id="862"]
864 [label="864 @ N3\n__VERIFIER_assert\n" id="864"]
866 [label="866 @ N0\n__VERIFIER_assert exit\n" id="866"]
867 [label="867 @ N22\nmain\n" id="867"]
868 [label="868 @ N28\nmain\n" id="868"]
869 [label="869 @ N1\n__VERIFIER_assert entry\n" id="869"]
870 [label="870 @ N2\n__VERIFIER_assert\n" id="870"]
872 [label="872 @ N3\n__VERIFIER_assert\n" id="872"]
874 [label="874 @ N0\n__VERIFIER_assert exit\n" id="874"]
875 [label="875 @ N29\nmain\n" id="875"]
876 [label="876 @ N30\nmain\n" id="876"]
878 [fillcolor="cornflowerblue" label="878 @ N19\nmain\nAbstractionState: ABS98\n" id="878"]
879 [label="879 @ N20\nmain\n" id="879"]
948 [label="948 @ N1\n__VERIFIER_assert entry\n" id="948"]
949 [label="949 @ N2\n__VERIFIER_assert\n" id="949"]
951 [label="951 @ N3\n__VERIFIER_assert\n" id="951"]
953 [label="953 @ N0\n__VERIFIER_assert exit\n" id="953"]
954 [label="954 @ N22\nmain\n" id="954"]
955 [label="955 @ N28\nmain\n" id="955"]
956 [label="956 @ N1\n__VERIFIER_assert entry\n" id="956"]
957 [label="957 @ N2\n__VERIFIER_assert\n" id="957"]
959 [label="959 @ N3\n__VERIFIER_assert\n" id="959"]
961 [label="961 @ N0\n__VERIFIER_assert exit\n" id="961"]
962 [label="962 @ N29\nmain\n" id="962"]
963 [label="963 @ N30\nmain\n" id="963"]
965 [fillcolor="cornflowerblue" label="965 @ N19\nmain\nAbstractionState: ABS108\n" id="965"]
967 [label="967 @ N21\nmain\n" id="967"]
968 [label="968 @ N31\nmain\n" id="968"]
970 [fillcolor="cornflowerblue" label="970 @ N32\nmain\nAbstractionState: ABS109\n" id="970"]
971 [label="971 @ N33\nmain\n" id="971"]
983 [label="983 @ N37\nmain\n" id="983"]
985 [label="985 @ N39\nmain\n" id="985"]
992 [label="992 @ N35\nmain\n" id="992"]
993 [label="993 @ N1\n__VERIFIER_assert entry\n" id="993"]
994 [label="994 @ N2\n__VERIFIER_assert\n" id="994"]
996 [label="996 @ N3\n__VERIFIER_assert\n" id="996"]
998 [label="998 @ N0\n__VERIFIER_assert exit\n" id="998"]
999 [label="999 @ N42\nmain\n" id="999"]
1000 [label="1000 @ N43\nmain\n" id="1000"]
1002 [fillcolor="cornflowerblue" label="1002 @ N32\nmain\nAbstractionState: ABS112\n" id="1002"]
1003 [label="1003 @ N33\nmain\n" id="1003"]
1015 [label="1015 @ N37\nmain\n" id="1015"]
1017 [label="1017 @ N39\nmain\n" id="1017"]
1024 [label="1024 @ N35\nmain\n" id="1024"]
1025 [label="1025 @ N1\n__VERIFIER_assert entry\n" id="1025"]
1026 [label="1026 @ N2\n__VERIFIER_assert\n" id="1026"]
1028 [label="1028 @ N3\n__VERIFIER_assert\n" id="1028"]
1030 [label="1030 @ N0\n__VERIFIER_assert exit\n" id="1030"]
1031 [label="1031 @ N42\nmain\n" id="1031"]
1032 [label="1032 @ N43\nmain\n" id="1032"]
1034 [fillcolor="cornflowerblue" label="1034 @ N32\nmain\nAbstractionState: ABS115\n" id="1034"]
1036 [label="1036 @ N34\nmain\n" id="1036"]
1037 [label="1037 @ N44\nmain\n" id="1037"]
1038 [label="1038 @ N1\n__VERIFIER_assert entry\n" id="1038"]
1039 [label="1039 @ N2\n__VERIFIER_assert\n" id="1039"]
1040 [label="1040 @ N4\n__VERIFIER_assert\n" id="1040"]
1043 [fillcolor="red" label="1043 @ N5\n__VERIFIER_assert\nAbstractionState: ABS116\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="1043"]
1016 [label="1016 @ N40\nmain\n" id="1016"]
1019 [label="1019 @ N41\nmain\n" id="1019"]
1014 [label="1014 @ N36\nmain\n" id="1014"]
1022 [label="1022 @ N38\nmain\n" id="1022"]
984 [label="984 @ N40\nmain\n" id="984"]
987 [label="987 @ N41\nmain\n" id="987"]
982 [label="982 @ N36\nmain\n" id="982"]
990 [label="990 @ N38\nmain\n" id="990"]
0 -> 25 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 25"]
25 -> 26 [color="red" label="Lines 7 - 88: \lvoid abort();\lvoid __VERIFIER_assert(int cond);\lint __VERIFIER_nondet_int();\lvoid __VERIFIER_assume(int);\lint main();\lFunction start dummy edge\lint x = 0;\lint n;\ln = __VERIFIER_nondet_int();\l" id="25 -> 26"]
26 -> 28 [color="red" label="Line 89: \l[!(n < 100)]\l" id="26 -> 28"]
26 -> 31 [label="Line 89: \l[n < 100]\l" id="26 -> 31"]
28 -> 30 [color="red" label="Line 89: \l[!(n > 1000000)]\l" id="28 -> 30"]
28 -> 31 [label="Line 89: \l[n > 1000000]\l" id="28 -> 31"]
30 -> 32 [color="red" label="Lines 91 - 92: \lint y = n;\lint runtime_div;\l" id="30 -> 32"]
32 -> 695 [color="red" label="Line 94: \lwhile\l" id="32 -> 695"]
695 -> 696 [color="red" label="Line 94: \l[(x + y) <= 999999]\l" id="695 -> 696"]
695 -> 697 [label="Line 94: \l[!((x + y) <= 999999)]\l" id="695 -> 697"]
696 -> 861 [color="red" label="Line 95: \l__VERIFIER_assert((x + 1) <= 2147483647)\l" id="696 -> 861"]
861 -> 862 [color="red" label="Line 0: \lFunction start dummy edge\l" id="861 -> 862"]
862 -> 863 [label="Line 9: \l[cond == 0]\l" id="862 -> 863"]
862 -> 864 [color="red" label="Line 9: \l[!(cond == 0)]\l" id="862 -> 864"]
864 -> 866 [color="red" label="Line 0: \ldefault return\l" id="864 -> 866"]
866 -> 867 [color="red" label="Line 95: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((x + 1) <= 2147483647);\l" id="866 -> 867"]
867 -> 868 [color="red" label="Lines 96 - 97: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="867 -> 868"]
868 -> 869 [color="red" label="Line 98: \l__VERIFIER_assert((n - y) <= 2147483647)\l" id="868 -> 869"]
869 -> 870 [color="red" label="Line 0: \lFunction start dummy edge\l" id="869 -> 870"]
870 -> 871 [label="Line 9: \l[cond == 0]\l" id="870 -> 871"]
870 -> 872 [color="red" label="Line 9: \l[!(cond == 0)]\l" id="870 -> 872"]
872 -> 874 [color="red" label="Line 0: \ldefault return\l" id="872 -> 874"]
874 -> 875 [color="red" label="Line 98: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) <= 2147483647);\l" id="874 -> 875"]
875 -> 876 [color="red" label="Line 99: \lruntime_div = x / (n - y);\l" id="875 -> 876"]
876 -> 878 [color="red" label="Line 0: \l\l" id="876 -> 878"]
878 -> 879 [color="red" label="Line 94: \l[(x + y) <= 999999]\l" id="878 -> 879"]
878 -> 880 [label="Line 94: \l[!((x + y) <= 999999)]\l" id="878 -> 880"]
879 -> 948 [color="red" label="Line 95: \l__VERIFIER_assert((x + 1) <= 2147483647)\l" id="879 -> 948"]
948 -> 949 [color="red" label="Line 0: \lFunction start dummy edge\l" id="948 -> 949"]
949 -> 950 [label="Line 9: \l[cond == 0]\l" id="949 -> 950"]
949 -> 951 [color="red" label="Line 9: \l[!(cond == 0)]\l" id="949 -> 951"]
951 -> 953 [color="red" label="Line 0: \ldefault return\l" id="951 -> 953"]
953 -> 954 [color="red" label="Line 95: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((x + 1) <= 2147483647);\l" id="953 -> 954"]
954 -> 955 [color="red" label="Lines 96 - 97: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="954 -> 955"]
955 -> 956 [color="red" label="Line 98: \l__VERIFIER_assert((n - y) <= 2147483647)\l" id="955 -> 956"]
956 -> 957 [color="red" label="Line 0: \lFunction start dummy edge\l" id="956 -> 957"]
957 -> 958 [label="Line 9: \l[cond == 0]\l" id="957 -> 958"]
957 -> 959 [color="red" label="Line 9: \l[!(cond == 0)]\l" id="957 -> 959"]
959 -> 961 [color="red" label="Line 0: \ldefault return\l" id="959 -> 961"]
961 -> 962 [color="red" label="Line 98: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) <= 2147483647);\l" id="961 -> 962"]
962 -> 963 [color="red" label="Line 99: \lruntime_div = x / (n - y);\l" id="962 -> 963"]
963 -> 965 [color="red" label="Line 0: \l\l" id="963 -> 965"]
965 -> 966 [label="Line 94: \l[(x + y) <= 999999]\l" id="965 -> 966"]
965 -> 967 [color="red" label="Line 94: \l[!((x + y) <= 999999)]\l" id="965 -> 967"]
967 -> 968 [color="red" label="Line 102: \lint i = x + y;\l" id="967 -> 968"]
968 -> 970 [color="red" label="Line 103: \lwhile\l" id="968 -> 970"]
970 -> 971 [color="red" label="Line 103: \l[(x + y) > 0]\l" id="970 -> 971"]
970 -> 972 [label="Line 103: \l[!((x + y) > 0)]\l" id="970 -> 972"]
971 -> 982 [label="Line 105: \l[x > 0]\l" id="971 -> 982"]
971 -> 983 [color="red" label="Line 105: \l[!(x > 0)]\l" id="971 -> 983"]
983 -> 984 [label="Line 107: \l[y > 0]\l" id="983 -> 984"]
983 -> 985 [color="red" label="Line 107: \l[!(y > 0)]\l" id="983 -> 985"]
985 -> 992 [color="red" label="Line 0: \l\l" id="985 -> 992"]
992 -> 993 [color="red" label="Line 110: \l__VERIFIER_assert((i + 1) <= 2147483647)\l" id="992 -> 993"]
993 -> 994 [color="red" label="Line 0: \lFunction start dummy edge\l" id="993 -> 994"]
994 -> 995 [label="Line 9: \l[cond == 0]\l" id="994 -> 995"]
994 -> 996 [color="red" label="Line 9: \l[!(cond == 0)]\l" id="994 -> 996"]
996 -> 998 [color="red" label="Line 0: \ldefault return\l" id="996 -> 998"]
998 -> 999 [color="red" label="Line 110: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((i + 1) <= 2147483647);\l" id="998 -> 999"]
999 -> 1000 [color="red" label="Line 111: \li = i + 1;\l" id="999 -> 1000"]
1000 -> 1002 [color="red" label="Line 0: \l\l" id="1000 -> 1002"]
1002 -> 1003 [color="red" label="Line 103: \l[(x + y) > 0]\l" id="1002 -> 1003"]
1002 -> 1004 [label="Line 103: \l[!((x + y) > 0)]\l" id="1002 -> 1004"]
1003 -> 1014 [label="Line 105: \l[x > 0]\l" id="1003 -> 1014"]
1003 -> 1015 [color="red" label="Line 105: \l[!(x > 0)]\l" id="1003 -> 1015"]
1015 -> 1016 [label="Line 107: \l[y > 0]\l" id="1015 -> 1016"]
1015 -> 1017 [color="red" label="Line 107: \l[!(y > 0)]\l" id="1015 -> 1017"]
1017 -> 1024 [color="red" label="Line 0: \l\l" id="1017 -> 1024"]
1024 -> 1025 [color="red" label="Line 110: \l__VERIFIER_assert((i + 1) <= 2147483647)\l" id="1024 -> 1025"]
1025 -> 1026 [color="red" label="Line 0: \lFunction start dummy edge\l" id="1025 -> 1026"]
1026 -> 1027 [label="Line 9: \l[cond == 0]\l" id="1026 -> 1027"]
1026 -> 1028 [color="red" label="Line 9: \l[!(cond == 0)]\l" id="1026 -> 1028"]
1028 -> 1030 [color="red" label="Line 0: \ldefault return\l" id="1028 -> 1030"]
1030 -> 1031 [color="red" label="Line 110: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((i + 1) <= 2147483647);\l" id="1030 -> 1031"]
1031 -> 1032 [color="red" label="Line 111: \li = i + 1;\l" id="1031 -> 1032"]
1032 -> 1034 [color="red" label="Line 0: \l\l" id="1032 -> 1034"]
1034 -> 1035 [label="Line 103: \l[(x + y) > 0]\l" id="1034 -> 1035"]
1034 -> 1036 [color="red" label="Line 103: \l[!((x + y) > 0)]\l" id="1034 -> 1036"]
1036 -> 1037 [color="red" label="Line 113: \lLabel: __FRAMAC_OCTAGON8\l" id="1036 -> 1037"]
1037 -> 1038 [color="red" label="Line 119: \l__VERIFIER_assert((((2 * x) + y) + n) >= 100)\l" id="1037 -> 1038"]
1038 -> 1039 [color="red" label="Line 0: \lFunction start dummy edge\l" id="1038 -> 1039"]
1039 -> 1040 [color="red" label="Line 9: \l[cond == 0]\l" id="1039 -> 1040"]
1039 -> 1041 [label="Line 9: \l[!(cond == 0)]\l" id="1039 -> 1041"]
1040 -> 1043 [color="red" label="Line 10: \lLabel: ERROR\l" id="1040 -> 1043"]
1016 -> 1019 [label="Line 108: \ly = y - 1;\l" id="1016 -> 1019"]
1019 -> 1024 [label="Line 0: \l\l" id="1019 -> 1024"]
1014 -> 1022 [label="Line 106: \lx = x - 1;\l" id="1014 -> 1022"]
1022 -> 1024 [label="Line 0: \l\l" id="1022 -> 1024"]
984 -> 987 [label="Line 108: \ly = y - 1;\l" id="984 -> 987"]
987 -> 992 [label="Line 0: \l\l" id="987 -> 992"]
982 -> 990 [label="Line 106: \lx = x - 1;\l" id="982 -> 990"]
990 -> 992 [label="Line 0: \l\l" id="990 -> 992"]
}
