digraph CFA {
8 [shape="circle" label="N8\n50"]
52 [shape="circle" label="N52\n49"]
53 [shape="circle" label="N53\n48"]
54 [shape="circle" label="N54\n47"]
55 [shape="circle" label="N55\n46"]
56 [shape="circle" label="N56\n45"]
57 [shape="circle" label="N57\n44"]
9 [shape="circle" label="N9\n43"]
10 [shape="circle" label="N10\n42"]
11 [shape="circle" label="N11\n41"]
12 [shape="diamond" label="N12\n40"]
15 [shape="diamond" label="N15\n39"]
13 [shape="circle" label="N13\n36"]
17 [shape="circle" label="N17\n35"]
18 [shape="circle" label="N18\n34"]
19 [shape="doublecircle" label="N19\n33"]
21 [shape="circle" label="N21\n32"]
31 [shape="circle" label="N31\n31"]
32 [shape="doublecircle" label="N32\n30"]
34 [shape="circle" label="N34\n29"]
44 [shape="circle" label="N44\n28"]
45 [shape="diamond" label="N45\n27"]
48 [shape="circle" label="N48\n25"]
49 [shape="diamond" label="N49\n23"]
59 [shape="circle" label="N59\n0"]
50 [shape="circle" label="N50\n22"]
1 [shape="circle" label="N1\n6"]
2 [shape="diamond" label="N2\n5"]
3 [shape="circle" label="N3\n1"]
0 [shape="circle" label="N0\n0"]
29 [shape="circle" label="N29\n1"]
30 [shape="circle" label="N30\n0"]
22 [shape="circle" label="N22\n8"]
23 [shape="circle" label="N23\n7"]
24 [shape="circle" label="N24\n6"]
25 [shape="circle" label="N25\n5"]
26 [shape="circle" label="N26\n4"]
27 [shape="circle" label="N27\n3"]
28 [shape="circle" label="N28\n2"]
42 [shape="circle" label="N42\n11"]
43 [shape="circle" label="N43\n10"]
51 [shape="circle" label="N51\n21"]
7 [shape="circle" label="N7\n20"]
4 [shape="circle" label="N4\n4"]
5 [shape="circle" label="N5\n3"]
58 [shape="circle" label="N58\n0"]
46 [shape="diamond" label="N46\n26"]
47 [shape="circle" label="N47\n24"]
33 [shape="diamond" label="N33\n19"]
37 [shape="diamond" label="N37\n18"]
39 [shape="circle" label="N39\n17"]
35 [shape="circle" label="N35\n12"]
40 [shape="circle" label="N40\n16"]
41 [shape="circle" label="N41\n15"]
36 [shape="circle" label="N36\n14"]
38 [shape="circle" label="N38\n13"]
20 [shape="circle" label="N20\n9"]
14 [shape="circle" label="N14\n38"]
60 [shape="circle" label="N60\n0"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
1 -> 2 [label="Function start dummy edge"]
2 -> 4 [label="[cond == 0]"]
2 -> 3 [label="[!(cond == 0)]"]
3 -> 0 [label="default return"]
4 -> 5 [label="Label: ERROR"]
5 -> 58 [label="abort();"]}
subgraph cluster_main {
label="main()"
8 -> 52 [label="INIT GLOBAL VARS"]
52 -> 53 [label="void abort();"]
53 -> 54 [label="void __VERIFIER_assert(int cond);"]
54 -> 55 [label="int __VERIFIER_nondet_int();"]
55 -> 56 [label="void __VERIFIER_assume(int);"]
56 -> 57 [label="int main();"]
57 -> 9 [label="Function start dummy edge"]
9 -> 10 [label="int x = 0;"]
10 -> 11 [label="int n;"]
11 -> 12 [label="n = __VERIFIER_nondet_int();"]
12 -> 14 [label="[n < 100]"]
12 -> 15 [label="[!(n < 100)]"]
15 -> 14 [label="[n > 1000000]"]
15 -> 13 [label="[!(n > 1000000)]"]
13 -> 17 [label="int y = n;"]
17 -> 18 [label="int runtime_div;"]
18 -> 19 [label="while"]
19 -> 20 [label="[(x + y) <= 999999]"]
19 -> 21 [label="[!((x + y) <= 999999)]"]
21 -> 31 [label="int i = x + y;"]
31 -> 32 [label="while"]
32 -> 33 [label="[(x + y) > 0]"]
32 -> 34 [label="[!((x + y) > 0)]"]
34 -> 44 [label="Label: __FRAMAC_OCTAGON8"]
44 -> 45 [label="int __CPAchecker_TMP_2;"]
45 -> 46 [label="[100 <= (x + n)]"]
45 -> 48 [label="[!(100 <= (x + n))]"]
48 -> 49 [label="__CPAchecker_TMP_2 = 0;"]
49 -> 50 [label="[__CPAchecker_TMP_2 != 0]"]
49 -> 59 [label="[!(__CPAchecker_TMP_2 != 0)]"]
50 -> 51 [label="__VERIFIER_assert((((2 * x) + y) + n) >= 100);" style="dotted" arrowhead="empty"]
29 -> 30 [label="runtime_div = x / (n - y);"]
30 -> 19 [label=""]
22 -> 23 [label="const int __CPAchecker_TMP_0 = x;"]
23 -> 24 [label="x = x + 1;"]
24 -> 25 [label="__CPAchecker_TMP_0;"]
25 -> 26 [label="const int __CPAchecker_TMP_1 = y;"]
26 -> 27 [label="y = y - 1;"]
27 -> 28 [label="__CPAchecker_TMP_1;"]
28 -> 29 [label="__VERIFIER_assert((n - y) <= 2147483647);" style="dotted" arrowhead="empty"]
42 -> 43 [label="i = i + 1;"]
43 -> 32 [label=""]
51 -> 7 [label="default return"]
46 -> 47 [label="[(x + n) <= 2147483647]"]
46 -> 48 [label="[!((x + n) <= 2147483647)]"]
47 -> 49 [label="__CPAchecker_TMP_2 = 1;"]
33 -> 36 [label="[x > 0]"]
33 -> 37 [label="[!(x > 0)]"]
37 -> 40 [label="[y > 0]"]
37 -> 39 [label="[!(y > 0)]"]
39 -> 35 [label=""]
35 -> 42 [label="__VERIFIER_assert((i + 1) <= 2147483647);" style="dotted" arrowhead="empty"]
40 -> 41 [label="y = y - 1;"]
41 -> 35 [label=""]
36 -> 38 [label="x = x - 1;"]
38 -> 35 [label=""]
20 -> 22 [label="__VERIFIER_assert((x + 1) <= 2147483647);" style="dotted" arrowhead="empty"]
14 -> 60 [label="abort();"]}
50 -> 1 [label="__VERIFIER_assert((((2 * x) + y) + n) >= 100)"]
0 -> 51 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert((((2 * x) + y) + n) >= 100);"]
0 -> 42 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert((i + 1) <= 2147483647);"]
0 -> 22 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert((x + 1) <= 2147483647);"]
0 -> 29 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) <= 2147483647);"]
28 -> 1 [label="__VERIFIER_assert((n - y) <= 2147483647)"]
35 -> 1 [label="__VERIFIER_assert((i + 1) <= 2147483647)"]
20 -> 1 [label="__VERIFIER_assert((x + 1) <= 2147483647)"]}