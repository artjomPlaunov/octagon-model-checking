digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N8\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
25 [label="25 @ N46\nmain\n" id="25"]
26 [label="26 @ N12\nmain\n" id="26"]
28 [label="28 @ N15\nmain\n" id="28"]
30 [label="30 @ N13\nmain\n" id="30"]
32 [label="32 @ N18\nmain\n" id="32"]
409 [fillcolor="cornflowerblue" label="409 @ N19\nmain\nAbstractionState: ABS47\n" id="409"]
410 [label="410 @ N20\nmain\n" id="410"]
575 [label="575 @ N1\n__VERIFIER_assert entry\n" id="575"]
576 [label="576 @ N2\n__VERIFIER_assert\n" id="576"]
578 [label="578 @ N3\n__VERIFIER_assert\n" id="578"]
580 [label="580 @ N0\n__VERIFIER_assert exit\n" id="580"]
581 [label="581 @ N22\nmain\n" id="581"]
582 [label="582 @ N28\nmain\n" id="582"]
583 [label="583 @ N1\n__VERIFIER_assert entry\n" id="583"]
584 [label="584 @ N2\n__VERIFIER_assert\n" id="584"]
586 [label="586 @ N3\n__VERIFIER_assert\n" id="586"]
588 [label="588 @ N0\n__VERIFIER_assert exit\n" id="588"]
589 [label="589 @ N29\nmain\n" id="589"]
590 [label="590 @ N30\nmain\n" id="590"]
592 [fillcolor="cornflowerblue" label="592 @ N19\nmain\nAbstractionState: ABS66\n" id="592"]
593 [label="593 @ N20\nmain\n" id="593"]
630 [label="630 @ N1\n__VERIFIER_assert entry\n" id="630"]
631 [label="631 @ N2\n__VERIFIER_assert\n" id="631"]
633 [label="633 @ N3\n__VERIFIER_assert\n" id="633"]
635 [label="635 @ N0\n__VERIFIER_assert exit\n" id="635"]
636 [label="636 @ N22\nmain\n" id="636"]
637 [label="637 @ N28\nmain\n" id="637"]
638 [label="638 @ N1\n__VERIFIER_assert entry\n" id="638"]
639 [label="639 @ N2\n__VERIFIER_assert\n" id="639"]
641 [label="641 @ N3\n__VERIFIER_assert\n" id="641"]
643 [label="643 @ N0\n__VERIFIER_assert exit\n" id="643"]
644 [label="644 @ N29\nmain\n" id="644"]
645 [label="645 @ N30\nmain\n" id="645"]
647 [fillcolor="cornflowerblue" label="647 @ N19\nmain\nAbstractionState: ABS73\n" id="647"]
649 [label="649 @ N21\nmain\n" id="649"]
650 [label="650 @ N31\nmain\n" id="650"]
652 [fillcolor="cornflowerblue" label="652 @ N32\nmain\nAbstractionState: ABS74\n" id="652"]
653 [label="653 @ N33\nmain\n" id="653"]
665 [label="665 @ N37\nmain\n" id="665"]
667 [label="667 @ N39\nmain\n" id="667"]
674 [label="674 @ N35\nmain\n" id="674"]
675 [label="675 @ N1\n__VERIFIER_assert entry\n" id="675"]
676 [label="676 @ N2\n__VERIFIER_assert\n" id="676"]
678 [label="678 @ N3\n__VERIFIER_assert\n" id="678"]
680 [label="680 @ N0\n__VERIFIER_assert exit\n" id="680"]
681 [label="681 @ N42\nmain\n" id="681"]
682 [label="682 @ N43\nmain\n" id="682"]
684 [fillcolor="cornflowerblue" label="684 @ N32\nmain\nAbstractionState: ABS77\n" id="684"]
686 [label="686 @ N34\nmain\n" id="686"]
687 [label="687 @ N44\nmain\n" id="687"]
688 [label="688 @ N1\n__VERIFIER_assert entry\n" id="688"]
689 [label="689 @ N2\n__VERIFIER_assert\n" id="689"]
690 [label="690 @ N4\n__VERIFIER_assert\n" id="690"]
693 [fillcolor="red" label="693 @ N5\n__VERIFIER_assert\nAbstractionState: ABS78\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="693"]
666 [label="666 @ N40\nmain\n" id="666"]
669 [label="669 @ N41\nmain\n" id="669"]
664 [label="664 @ N36\nmain\n" id="664"]
672 [label="672 @ N38\nmain\n" id="672"]
0 -> 25 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 25"]
25 -> 26 [color="red" label="Lines 7 - 88: \lvoid abort();\lvoid __VERIFIER_assert(int cond);\lint __VERIFIER_nondet_int();\lvoid __VERIFIER_assume(int);\lint main();\lFunction start dummy edge\lint x = 0;\lint n;\ln = __VERIFIER_nondet_int();\l" id="25 -> 26"]
26 -> 28 [color="red" label="Line 89: \l[!(n < 100)]\l" id="26 -> 28"]
26 -> 31 [label="Line 89: \l[n < 100]\l" id="26 -> 31"]
28 -> 30 [color="red" label="Line 89: \l[!(n > 1000000)]\l" id="28 -> 30"]
28 -> 31 [label="Line 89: \l[n > 1000000]\l" id="28 -> 31"]
30 -> 32 [color="red" label="Lines 91 - 92: \lint y = n;\lint runtime_div;\l" id="30 -> 32"]
32 -> 409 [color="red" label="Line 94: \lwhile\l" id="32 -> 409"]
409 -> 410 [color="red" label="Line 94: \l[(x + y) <= 999999]\l" id="409 -> 410"]
409 -> 411 [label="Line 94: \l[!((x + y) <= 999999)]\l" id="409 -> 411"]
410 -> 575 [color="red" label="Line 95: \l__VERIFIER_assert((x + 1) <= 2147483647)\l" id="410 -> 575"]
575 -> 576 [color="red" label="Line 0: \lFunction start dummy edge\l" id="575 -> 576"]
576 -> 577 [label="Line 9: \l[cond == 0]\l" id="576 -> 577"]
576 -> 578 [color="red" label="Line 9: \l[!(cond == 0)]\l" id="576 -> 578"]
578 -> 580 [color="red" label="Line 0: \ldefault return\l" id="578 -> 580"]
580 -> 581 [color="red" label="Line 95: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((x + 1) <= 2147483647);\l" id="580 -> 581"]
581 -> 582 [color="red" label="Lines 96 - 97: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="581 -> 582"]
582 -> 583 [color="red" label="Line 98: \l__VERIFIER_assert((n - y) <= 2147483647)\l" id="582 -> 583"]
583 -> 584 [color="red" label="Line 0: \lFunction start dummy edge\l" id="583 -> 584"]
584 -> 585 [label="Line 9: \l[cond == 0]\l" id="584 -> 585"]
584 -> 586 [color="red" label="Line 9: \l[!(cond == 0)]\l" id="584 -> 586"]
586 -> 588 [color="red" label="Line 0: \ldefault return\l" id="586 -> 588"]
588 -> 589 [color="red" label="Line 98: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) <= 2147483647);\l" id="588 -> 589"]
589 -> 590 [color="red" label="Line 99: \lruntime_div = x / (n - y);\l" id="589 -> 590"]
590 -> 592 [color="red" label="Line 0: \l\l" id="590 -> 592"]
592 -> 593 [color="red" label="Line 94: \l[(x + y) <= 999999]\l" id="592 -> 593"]
592 -> 594 [label="Line 94: \l[!((x + y) <= 999999)]\l" id="592 -> 594"]
593 -> 630 [color="red" label="Line 95: \l__VERIFIER_assert((x + 1) <= 2147483647)\l" id="593 -> 630"]
630 -> 631 [color="red" label="Line 0: \lFunction start dummy edge\l" id="630 -> 631"]
631 -> 632 [label="Line 9: \l[cond == 0]\l" id="631 -> 632"]
631 -> 633 [color="red" label="Line 9: \l[!(cond == 0)]\l" id="631 -> 633"]
633 -> 635 [color="red" label="Line 0: \ldefault return\l" id="633 -> 635"]
635 -> 636 [color="red" label="Line 95: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((x + 1) <= 2147483647);\l" id="635 -> 636"]
636 -> 637 [color="red" label="Lines 96 - 97: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="636 -> 637"]
637 -> 638 [color="red" label="Line 98: \l__VERIFIER_assert((n - y) <= 2147483647)\l" id="637 -> 638"]
638 -> 639 [color="red" label="Line 0: \lFunction start dummy edge\l" id="638 -> 639"]
639 -> 640 [label="Line 9: \l[cond == 0]\l" id="639 -> 640"]
639 -> 641 [color="red" label="Line 9: \l[!(cond == 0)]\l" id="639 -> 641"]
641 -> 643 [color="red" label="Line 0: \ldefault return\l" id="641 -> 643"]
643 -> 644 [color="red" label="Line 98: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) <= 2147483647);\l" id="643 -> 644"]
644 -> 645 [color="red" label="Line 99: \lruntime_div = x / (n - y);\l" id="644 -> 645"]
645 -> 647 [color="red" label="Line 0: \l\l" id="645 -> 647"]
647 -> 648 [label="Line 94: \l[(x + y) <= 999999]\l" id="647 -> 648"]
647 -> 649 [color="red" label="Line 94: \l[!((x + y) <= 999999)]\l" id="647 -> 649"]
649 -> 650 [color="red" label="Line 102: \lint i = x + y;\l" id="649 -> 650"]
650 -> 652 [color="red" label="Line 103: \lwhile\l" id="650 -> 652"]
652 -> 653 [color="red" label="Line 103: \l[(x + y) > 0]\l" id="652 -> 653"]
652 -> 654 [label="Line 103: \l[!((x + y) > 0)]\l" id="652 -> 654"]
653 -> 664 [label="Line 105: \l[x > 0]\l" id="653 -> 664"]
653 -> 665 [color="red" label="Line 105: \l[!(x > 0)]\l" id="653 -> 665"]
665 -> 666 [label="Line 107: \l[y > 0]\l" id="665 -> 666"]
665 -> 667 [color="red" label="Line 107: \l[!(y > 0)]\l" id="665 -> 667"]
667 -> 674 [color="red" label="Line 0: \l\l" id="667 -> 674"]
674 -> 675 [color="red" label="Line 110: \l__VERIFIER_assert((i + 1) <= 2147483647)\l" id="674 -> 675"]
675 -> 676 [color="red" label="Line 0: \lFunction start dummy edge\l" id="675 -> 676"]
676 -> 677 [label="Line 9: \l[cond == 0]\l" id="676 -> 677"]
676 -> 678 [color="red" label="Line 9: \l[!(cond == 0)]\l" id="676 -> 678"]
678 -> 680 [color="red" label="Line 0: \ldefault return\l" id="678 -> 680"]
680 -> 681 [color="red" label="Line 110: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((i + 1) <= 2147483647);\l" id="680 -> 681"]
681 -> 682 [color="red" label="Line 111: \li = i + 1;\l" id="681 -> 682"]
682 -> 684 [color="red" label="Line 0: \l\l" id="682 -> 684"]
684 -> 685 [label="Line 103: \l[(x + y) > 0]\l" id="684 -> 685"]
684 -> 686 [color="red" label="Line 103: \l[!((x + y) > 0)]\l" id="684 -> 686"]
686 -> 687 [color="red" label="Line 113: \lLabel: __FRAMAC_OCTAGON8\l" id="686 -> 687"]
687 -> 688 [color="red" label="Line 119: \l__VERIFIER_assert((((2 * x) + y) + n) >= 100)\l" id="687 -> 688"]
688 -> 689 [color="red" label="Line 0: \lFunction start dummy edge\l" id="688 -> 689"]
689 -> 690 [color="red" label="Line 9: \l[cond == 0]\l" id="689 -> 690"]
689 -> 691 [label="Line 9: \l[!(cond == 0)]\l" id="689 -> 691"]
690 -> 693 [color="red" label="Line 10: \lLabel: ERROR\l" id="690 -> 693"]
666 -> 669 [label="Line 108: \ly = y - 1;\l" id="666 -> 669"]
669 -> 674 [label="Line 0: \l\l" id="669 -> 674"]
664 -> 672 [label="Line 106: \lx = x - 1;\l" id="664 -> 672"]
672 -> 674 [label="Line 0: \l\l" id="672 -> 674"]
}
