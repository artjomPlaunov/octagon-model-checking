digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N8\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
29 [label="29 @ N35\nmain\n" id="29"]
30 [label="30 @ N12\nmain\n" id="30"]
32 [label="32 @ N15\nmain\n" id="32"]
34 [label="34 @ N13\nmain\n" id="34"]
36 [label="36 @ N18\nmain\n" id="36"]
100 [fillcolor="cornflowerblue" label="100 @ N19\nmain\nAbstractionState: ABS9\n" id="100"]
101 [label="101 @ N20\nmain\n" id="101"]
104 [label="104 @ N28\nmain\n" id="104"]
109 [label="109 @ N31\nmain\n" id="109"]
112 [label="112 @ N32\nmain\n" id="112"]
113 [label="113 @ N1\n__VERIFIER_assert entry\n" id="113"]
114 [label="114 @ N2\n__VERIFIER_assert\n" id="114"]
116 [label="116 @ N3\n__VERIFIER_assert\n" id="116"]
118 [label="118 @ N0\n__VERIFIER_assert exit\n" id="118"]
119 [label="119 @ N33\nmain\n" id="119"]
120 [label="120 @ N34\nmain\n" id="120"]
122 [fillcolor="cornflowerblue" label="122 @ N19\nmain\nAbstractionState: ABS11\n" id="122"]
123 [label="123 @ N20\nmain\n" id="123"]
126 [label="126 @ N28\nmain\n" id="126"]
131 [label="131 @ N31\nmain\n" id="131"]
134 [label="134 @ N32\nmain\n" id="134"]
135 [label="135 @ N1\n__VERIFIER_assert entry\n" id="135"]
136 [label="136 @ N2\n__VERIFIER_assert\n" id="136"]
138 [label="138 @ N3\n__VERIFIER_assert\n" id="138"]
140 [label="140 @ N0\n__VERIFIER_assert exit\n" id="140"]
141 [label="141 @ N33\nmain\n" id="141"]
142 [label="142 @ N34\nmain\n" id="142"]
144 [fillcolor="cornflowerblue" label="144 @ N19\nmain\nAbstractionState: ABS13\n" id="144"]
145 [label="145 @ N20\nmain\n" id="145"]
148 [label="148 @ N28\nmain\n" id="148"]
153 [label="153 @ N31\nmain\n" id="153"]
156 [label="156 @ N32\nmain\n" id="156"]
157 [label="157 @ N1\n__VERIFIER_assert entry\n" id="157"]
158 [label="158 @ N2\n__VERIFIER_assert\n" id="158"]
159 [label="159 @ N4\n__VERIFIER_assert\n" id="159"]
162 [fillcolor="red" label="162 @ N5\n__VERIFIER_assert\nAbstractionState: ABS14\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="162"]
149 [label="149 @ N29\nmain\n" id="149"]
151 [label="151 @ N30\nmain\n" id="151"]
127 [label="127 @ N29\nmain\n" id="127"]
129 [label="129 @ N30\nmain\n" id="129"]
105 [label="105 @ N29\nmain\n" id="105"]
107 [label="107 @ N30\nmain\n" id="107"]
0 -> 29 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 29"]
29 -> 30 [color="red" label="Lines 77 - 86: \lvoid abort();\lvoid __VERIFIER_assert(int cond);\lint __VERIFIER_nondet_int();\lvoid __VERIFIER_assume(int);\lvoid __VERIFIER_assert(int);\lint main();\lFunction start dummy edge\lint x = 0;\lint n;\ln = __VERIFIER_nondet_int();\l" id="29 -> 30"]
30 -> 32 [color="red" label="Line 87: \l[!(n < 100)]\l" id="30 -> 32"]
30 -> 35 [label="Line 87: \l[n < 100]\l" id="30 -> 35"]
32 -> 34 [color="red" label="Line 87: \l[!(n > 1000000)]\l" id="32 -> 34"]
32 -> 35 [label="Line 87: \l[n > 1000000]\l" id="32 -> 35"]
34 -> 36 [color="red" label="Lines 90 - 91: \lint y = n;\lint runtime_div;\l" id="34 -> 36"]
36 -> 100 [color="red" label="Line 93: \lwhile\l" id="36 -> 100"]
100 -> 101 [color="red" label="Line 93: \l[(x + y) <= 999999]\l" id="100 -> 101"]
100 -> 102 [label="Line 93: \l[!((x + y) <= 999999)]\l" id="100 -> 102"]
101 -> 104 [color="red" label="Lines 94 - 96: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\lint __CPAchecker_TMP_2;\l" id="101 -> 104"]
104 -> 105 [label="Line 96: \l[100 <= (x + n)]\l" id="104 -> 105"]
104 -> 109 [color="red" label="Line 96: \l[!(100 <= (x + n))]\l" id="104 -> 109"]
109 -> 112 [color="red" label="Line 0: \l__CPAchecker_TMP_2 = 0;\l" id="109 -> 112"]
112 -> 113 [color="red" label="Line 96: \l__VERIFIER_assert(__CPAchecker_TMP_2)\l" id="112 -> 113"]
113 -> 114 [color="red" label="Line 0: \lFunction start dummy edge\l" id="113 -> 114"]
114 -> 115 [label="Line 78: \l[cond == 0]\l" id="114 -> 115"]
114 -> 116 [color="red" label="Line 78: \l[!(cond == 0)]\l" id="114 -> 116"]
116 -> 118 [color="red" label="Line 0: \ldefault return\l" id="116 -> 118"]
118 -> 119 [color="red" label="Line 96: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert(__CPAchecker_TMP_2);\l" id="118 -> 119"]
119 -> 120 [color="red" label="Line 98: \lruntime_div = x / (n - y);\l" id="119 -> 120"]
120 -> 122 [color="red" label="Line 0: \l\l" id="120 -> 122"]
122 -> 123 [color="red" label="Line 93: \l[(x + y) <= 999999]\l" id="122 -> 123"]
122 -> 124 [label="Line 93: \l[!((x + y) <= 999999)]\l" id="122 -> 124"]
123 -> 126 [color="red" label="Lines 94 - 96: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\lint __CPAchecker_TMP_2;\l" id="123 -> 126"]
126 -> 127 [label="Line 96: \l[100 <= (x + n)]\l" id="126 -> 127"]
126 -> 131 [color="red" label="Line 96: \l[!(100 <= (x + n))]\l" id="126 -> 131"]
131 -> 134 [color="red" label="Line 0: \l__CPAchecker_TMP_2 = 0;\l" id="131 -> 134"]
134 -> 135 [color="red" label="Line 96: \l__VERIFIER_assert(__CPAchecker_TMP_2)\l" id="134 -> 135"]
135 -> 136 [color="red" label="Line 0: \lFunction start dummy edge\l" id="135 -> 136"]
136 -> 137 [label="Line 78: \l[cond == 0]\l" id="136 -> 137"]
136 -> 138 [color="red" label="Line 78: \l[!(cond == 0)]\l" id="136 -> 138"]
138 -> 140 [color="red" label="Line 0: \ldefault return\l" id="138 -> 140"]
140 -> 141 [color="red" label="Line 96: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert(__CPAchecker_TMP_2);\l" id="140 -> 141"]
141 -> 142 [color="red" label="Line 98: \lruntime_div = x / (n - y);\l" id="141 -> 142"]
142 -> 144 [color="red" label="Line 0: \l\l" id="142 -> 144"]
144 -> 145 [color="red" label="Line 93: \l[(x + y) <= 999999]\l" id="144 -> 145"]
144 -> 146 [label="Line 93: \l[!((x + y) <= 999999)]\l" id="144 -> 146"]
145 -> 148 [color="red" label="Lines 94 - 96: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\lint __CPAchecker_TMP_2;\l" id="145 -> 148"]
148 -> 149 [label="Line 96: \l[100 <= (x + n)]\l" id="148 -> 149"]
148 -> 153 [color="red" label="Line 96: \l[!(100 <= (x + n))]\l" id="148 -> 153"]
153 -> 156 [color="red" label="Line 0: \l__CPAchecker_TMP_2 = 0;\l" id="153 -> 156"]
156 -> 157 [color="red" label="Line 96: \l__VERIFIER_assert(__CPAchecker_TMP_2)\l" id="156 -> 157"]
157 -> 158 [color="red" label="Line 0: \lFunction start dummy edge\l" id="157 -> 158"]
158 -> 159 [color="red" label="Line 78: \l[cond == 0]\l" id="158 -> 159"]
158 -> 160 [label="Line 78: \l[!(cond == 0)]\l" id="158 -> 160"]
159 -> 162 [color="red" label="Line 78: \lLabel: ERROR\l" id="159 -> 162"]
149 -> 151 [label="Line 96: \l[(x + n) <= 2147483647]\l" id="149 -> 151"]
149 -> 153 [label="Line 96: \l[!((x + n) <= 2147483647)]\l" id="149 -> 153"]
151 -> 156 [label="Line 0: \l__CPAchecker_TMP_2 = 1;\l" id="151 -> 156"]
127 -> 129 [label="Line 96: \l[(x + n) <= 2147483647]\l" id="127 -> 129"]
127 -> 131 [label="Line 96: \l[!((x + n) <= 2147483647)]\l" id="127 -> 131"]
129 -> 134 [label="Line 0: \l__CPAchecker_TMP_2 = 1;\l" id="129 -> 134"]
105 -> 107 [label="Line 96: \l[(x + n) <= 2147483647]\l" id="105 -> 107"]
105 -> 109 [label="Line 96: \l[!((x + n) <= 2147483647)]\l" id="105 -> 109"]
107 -> 112 [label="Line 0: \l__CPAchecker_TMP_2 = 1;\l" id="107 -> 112"]
}
