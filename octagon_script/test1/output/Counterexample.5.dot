digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N8\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
29 [label="29 @ N35\nmain\n" id="29"]
30 [label="30 @ N12\nmain\n" id="30"]
32 [label="32 @ N15\nmain\n" id="32"]
34 [label="34 @ N13\nmain\n" id="34"]
36 [label="36 @ N18\nmain\n" id="36"]
164 [fillcolor="cornflowerblue" label="164 @ N19\nmain\nAbstractionState: ABS15\n" id="164"]
165 [label="165 @ N20\nmain\n" id="165"]
168 [label="168 @ N28\nmain\n" id="168"]
173 [label="173 @ N31\nmain\n" id="173"]
176 [label="176 @ N32\nmain\n" id="176"]
177 [label="177 @ N1\n__VERIFIER_assert entry\n" id="177"]
178 [label="178 @ N2\n__VERIFIER_assert\n" id="178"]
180 [label="180 @ N3\n__VERIFIER_assert\n" id="180"]
182 [label="182 @ N0\n__VERIFIER_assert exit\n" id="182"]
183 [label="183 @ N33\nmain\n" id="183"]
184 [label="184 @ N34\nmain\n" id="184"]
186 [fillcolor="cornflowerblue" label="186 @ N19\nmain\nAbstractionState: ABS17\n" id="186"]
187 [label="187 @ N20\nmain\n" id="187"]
190 [label="190 @ N28\nmain\n" id="190"]
195 [label="195 @ N31\nmain\n" id="195"]
198 [label="198 @ N32\nmain\n" id="198"]
199 [label="199 @ N1\n__VERIFIER_assert entry\n" id="199"]
200 [label="200 @ N2\n__VERIFIER_assert\n" id="200"]
202 [label="202 @ N3\n__VERIFIER_assert\n" id="202"]
204 [label="204 @ N0\n__VERIFIER_assert exit\n" id="204"]
205 [label="205 @ N33\nmain\n" id="205"]
206 [label="206 @ N34\nmain\n" id="206"]
208 [fillcolor="cornflowerblue" label="208 @ N19\nmain\nAbstractionState: ABS19\n" id="208"]
209 [label="209 @ N20\nmain\n" id="209"]
212 [label="212 @ N28\nmain\n" id="212"]
217 [label="217 @ N31\nmain\n" id="217"]
220 [label="220 @ N32\nmain\n" id="220"]
221 [label="221 @ N1\n__VERIFIER_assert entry\n" id="221"]
222 [label="222 @ N2\n__VERIFIER_assert\n" id="222"]
224 [label="224 @ N3\n__VERIFIER_assert\n" id="224"]
226 [label="226 @ N0\n__VERIFIER_assert exit\n" id="226"]
227 [label="227 @ N33\nmain\n" id="227"]
228 [label="228 @ N34\nmain\n" id="228"]
230 [fillcolor="cornflowerblue" label="230 @ N19\nmain\nAbstractionState: ABS21\n" id="230"]
231 [label="231 @ N20\nmain\n" id="231"]
234 [label="234 @ N28\nmain\n" id="234"]
239 [label="239 @ N31\nmain\n" id="239"]
242 [label="242 @ N32\nmain\n" id="242"]
243 [label="243 @ N1\n__VERIFIER_assert entry\n" id="243"]
244 [label="244 @ N2\n__VERIFIER_assert\n" id="244"]
245 [label="245 @ N4\n__VERIFIER_assert\n" id="245"]
248 [fillcolor="red" label="248 @ N5\n__VERIFIER_assert\nAbstractionState: ABS22\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="248"]
235 [label="235 @ N29\nmain\n" id="235"]
237 [label="237 @ N30\nmain\n" id="237"]
213 [label="213 @ N29\nmain\n" id="213"]
215 [label="215 @ N30\nmain\n" id="215"]
191 [label="191 @ N29\nmain\n" id="191"]
193 [label="193 @ N30\nmain\n" id="193"]
169 [label="169 @ N29\nmain\n" id="169"]
171 [label="171 @ N30\nmain\n" id="171"]
0 -> 29 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 29"]
29 -> 30 [color="red" label="Lines 77 - 86: \lvoid abort();\lvoid __VERIFIER_assert(int cond);\lint __VERIFIER_nondet_int();\lvoid __VERIFIER_assume(int);\lvoid __VERIFIER_assert(int);\lint main();\lFunction start dummy edge\lint x = 0;\lint n;\ln = __VERIFIER_nondet_int();\l" id="29 -> 30"]
30 -> 32 [color="red" label="Line 87: \l[!(n < 100)]\l" id="30 -> 32"]
30 -> 35 [label="Line 87: \l[n < 100]\l" id="30 -> 35"]
32 -> 34 [color="red" label="Line 87: \l[!(n > 1000000)]\l" id="32 -> 34"]
32 -> 35 [label="Line 87: \l[n > 1000000]\l" id="32 -> 35"]
34 -> 36 [color="red" label="Lines 90 - 91: \lint y = n;\lint runtime_div;\l" id="34 -> 36"]
36 -> 164 [color="red" label="Line 93: \lwhile\l" id="36 -> 164"]
164 -> 165 [color="red" label="Line 93: \l[(x + y) <= 999999]\l" id="164 -> 165"]
164 -> 166 [label="Line 93: \l[!((x + y) <= 999999)]\l" id="164 -> 166"]
165 -> 168 [color="red" label="Lines 94 - 96: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\lint __CPAchecker_TMP_2;\l" id="165 -> 168"]
168 -> 169 [label="Line 96: \l[100 <= (x + n)]\l" id="168 -> 169"]
168 -> 173 [color="red" label="Line 96: \l[!(100 <= (x + n))]\l" id="168 -> 173"]
173 -> 176 [color="red" label="Line 0: \l__CPAchecker_TMP_2 = 0;\l" id="173 -> 176"]
176 -> 177 [color="red" label="Line 96: \l__VERIFIER_assert(__CPAchecker_TMP_2)\l" id="176 -> 177"]
177 -> 178 [color="red" label="Line 0: \lFunction start dummy edge\l" id="177 -> 178"]
178 -> 179 [label="Line 78: \l[cond == 0]\l" id="178 -> 179"]
178 -> 180 [color="red" label="Line 78: \l[!(cond == 0)]\l" id="178 -> 180"]
180 -> 182 [color="red" label="Line 0: \ldefault return\l" id="180 -> 182"]
182 -> 183 [color="red" label="Line 96: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert(__CPAchecker_TMP_2);\l" id="182 -> 183"]
183 -> 184 [color="red" label="Line 98: \lruntime_div = x / (n - y);\l" id="183 -> 184"]
184 -> 186 [color="red" label="Line 0: \l\l" id="184 -> 186"]
186 -> 187 [color="red" label="Line 93: \l[(x + y) <= 999999]\l" id="186 -> 187"]
186 -> 188 [label="Line 93: \l[!((x + y) <= 999999)]\l" id="186 -> 188"]
187 -> 190 [color="red" label="Lines 94 - 96: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\lint __CPAchecker_TMP_2;\l" id="187 -> 190"]
190 -> 191 [label="Line 96: \l[100 <= (x + n)]\l" id="190 -> 191"]
190 -> 195 [color="red" label="Line 96: \l[!(100 <= (x + n))]\l" id="190 -> 195"]
195 -> 198 [color="red" label="Line 0: \l__CPAchecker_TMP_2 = 0;\l" id="195 -> 198"]
198 -> 199 [color="red" label="Line 96: \l__VERIFIER_assert(__CPAchecker_TMP_2)\l" id="198 -> 199"]
199 -> 200 [color="red" label="Line 0: \lFunction start dummy edge\l" id="199 -> 200"]
200 -> 201 [label="Line 78: \l[cond == 0]\l" id="200 -> 201"]
200 -> 202 [color="red" label="Line 78: \l[!(cond == 0)]\l" id="200 -> 202"]
202 -> 204 [color="red" label="Line 0: \ldefault return\l" id="202 -> 204"]
204 -> 205 [color="red" label="Line 96: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert(__CPAchecker_TMP_2);\l" id="204 -> 205"]
205 -> 206 [color="red" label="Line 98: \lruntime_div = x / (n - y);\l" id="205 -> 206"]
206 -> 208 [color="red" label="Line 0: \l\l" id="206 -> 208"]
208 -> 209 [color="red" label="Line 93: \l[(x + y) <= 999999]\l" id="208 -> 209"]
208 -> 210 [label="Line 93: \l[!((x + y) <= 999999)]\l" id="208 -> 210"]
209 -> 212 [color="red" label="Lines 94 - 96: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\lint __CPAchecker_TMP_2;\l" id="209 -> 212"]
212 -> 213 [label="Line 96: \l[100 <= (x + n)]\l" id="212 -> 213"]
212 -> 217 [color="red" label="Line 96: \l[!(100 <= (x + n))]\l" id="212 -> 217"]
217 -> 220 [color="red" label="Line 0: \l__CPAchecker_TMP_2 = 0;\l" id="217 -> 220"]
220 -> 221 [color="red" label="Line 96: \l__VERIFIER_assert(__CPAchecker_TMP_2)\l" id="220 -> 221"]
221 -> 222 [color="red" label="Line 0: \lFunction start dummy edge\l" id="221 -> 222"]
222 -> 223 [label="Line 78: \l[cond == 0]\l" id="222 -> 223"]
222 -> 224 [color="red" label="Line 78: \l[!(cond == 0)]\l" id="222 -> 224"]
224 -> 226 [color="red" label="Line 0: \ldefault return\l" id="224 -> 226"]
226 -> 227 [color="red" label="Line 96: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert(__CPAchecker_TMP_2);\l" id="226 -> 227"]
227 -> 228 [color="red" label="Line 98: \lruntime_div = x / (n - y);\l" id="227 -> 228"]
228 -> 230 [color="red" label="Line 0: \l\l" id="228 -> 230"]
230 -> 231 [color="red" label="Line 93: \l[(x + y) <= 999999]\l" id="230 -> 231"]
230 -> 232 [label="Line 93: \l[!((x + y) <= 999999)]\l" id="230 -> 232"]
231 -> 234 [color="red" label="Lines 94 - 96: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\lint __CPAchecker_TMP_2;\l" id="231 -> 234"]
234 -> 235 [label="Line 96: \l[100 <= (x + n)]\l" id="234 -> 235"]
234 -> 239 [color="red" label="Line 96: \l[!(100 <= (x + n))]\l" id="234 -> 239"]
239 -> 242 [color="red" label="Line 0: \l__CPAchecker_TMP_2 = 0;\l" id="239 -> 242"]
242 -> 243 [color="red" label="Line 96: \l__VERIFIER_assert(__CPAchecker_TMP_2)\l" id="242 -> 243"]
243 -> 244 [color="red" label="Line 0: \lFunction start dummy edge\l" id="243 -> 244"]
244 -> 245 [color="red" label="Line 78: \l[cond == 0]\l" id="244 -> 245"]
244 -> 246 [label="Line 78: \l[!(cond == 0)]\l" id="244 -> 246"]
245 -> 248 [color="red" label="Line 78: \lLabel: ERROR\l" id="245 -> 248"]
235 -> 237 [label="Line 96: \l[(x + n) <= 2147483647]\l" id="235 -> 237"]
235 -> 239 [label="Line 96: \l[!((x + n) <= 2147483647)]\l" id="235 -> 239"]
237 -> 242 [label="Line 0: \l__CPAchecker_TMP_2 = 1;\l" id="237 -> 242"]
213 -> 215 [label="Line 96: \l[(x + n) <= 2147483647]\l" id="213 -> 215"]
213 -> 217 [label="Line 96: \l[!((x + n) <= 2147483647)]\l" id="213 -> 217"]
215 -> 220 [label="Line 0: \l__CPAchecker_TMP_2 = 1;\l" id="215 -> 220"]
191 -> 193 [label="Line 96: \l[(x + n) <= 2147483647]\l" id="191 -> 193"]
191 -> 195 [label="Line 96: \l[!((x + n) <= 2147483647)]\l" id="191 -> 195"]
193 -> 198 [label="Line 0: \l__CPAchecker_TMP_2 = 1;\l" id="193 -> 198"]
169 -> 171 [label="Line 96: \l[(x + n) <= 2147483647]\l" id="169 -> 171"]
169 -> 173 [label="Line 96: \l[!((x + n) <= 2147483647)]\l" id="169 -> 173"]
171 -> 176 [label="Line 0: \l__CPAchecker_TMP_2 = 1;\l" id="171 -> 176"]
}
