digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N8\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
29 [label="29 @ N35\nmain\n" id="29"]
30 [label="30 @ N12\nmain\n" id="30"]
32 [label="32 @ N15\nmain\n" id="32"]
34 [label="34 @ N13\nmain\n" id="34"]
36 [label="36 @ N18\nmain\n" id="36"]
58 [fillcolor="cornflowerblue" label="58 @ N19\nmain\nAbstractionState: ABS5\n" id="58"]
59 [label="59 @ N20\nmain\n" id="59"]
62 [label="62 @ N28\nmain\n" id="62"]
67 [label="67 @ N31\nmain\n" id="67"]
70 [label="70 @ N32\nmain\n" id="70"]
71 [label="71 @ N1\n__VERIFIER_assert entry\n" id="71"]
72 [label="72 @ N2\n__VERIFIER_assert\n" id="72"]
74 [label="74 @ N3\n__VERIFIER_assert\n" id="74"]
76 [label="76 @ N0\n__VERIFIER_assert exit\n" id="76"]
77 [label="77 @ N33\nmain\n" id="77"]
78 [label="78 @ N34\nmain\n" id="78"]
80 [fillcolor="cornflowerblue" label="80 @ N19\nmain\nAbstractionState: ABS7\n" id="80"]
81 [label="81 @ N20\nmain\n" id="81"]
84 [label="84 @ N28\nmain\n" id="84"]
89 [label="89 @ N31\nmain\n" id="89"]
92 [label="92 @ N32\nmain\n" id="92"]
93 [label="93 @ N1\n__VERIFIER_assert entry\n" id="93"]
94 [label="94 @ N2\n__VERIFIER_assert\n" id="94"]
95 [label="95 @ N4\n__VERIFIER_assert\n" id="95"]
98 [fillcolor="red" label="98 @ N5\n__VERIFIER_assert\nAbstractionState: ABS8\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="98"]
85 [label="85 @ N29\nmain\n" id="85"]
87 [label="87 @ N30\nmain\n" id="87"]
63 [label="63 @ N29\nmain\n" id="63"]
65 [label="65 @ N30\nmain\n" id="65"]
0 -> 29 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 29"]
29 -> 30 [color="red" label="Lines 77 - 86: \lvoid abort();\lvoid __VERIFIER_assert(int cond);\lint __VERIFIER_nondet_int();\lvoid __VERIFIER_assume(int);\lvoid __VERIFIER_assert(int);\lint main();\lFunction start dummy edge\lint x = 0;\lint n;\ln = __VERIFIER_nondet_int();\l" id="29 -> 30"]
30 -> 32 [color="red" label="Line 87: \l[!(n < 100)]\l" id="30 -> 32"]
30 -> 35 [label="Line 87: \l[n < 100]\l" id="30 -> 35"]
32 -> 34 [color="red" label="Line 87: \l[!(n > 1000000)]\l" id="32 -> 34"]
32 -> 35 [label="Line 87: \l[n > 1000000]\l" id="32 -> 35"]
34 -> 36 [color="red" label="Lines 90 - 91: \lint y = n;\lint runtime_div;\l" id="34 -> 36"]
36 -> 58 [color="red" label="Line 93: \lwhile\l" id="36 -> 58"]
58 -> 59 [color="red" label="Line 93: \l[(x + y) <= 999999]\l" id="58 -> 59"]
58 -> 60 [label="Line 93: \l[!((x + y) <= 999999)]\l" id="58 -> 60"]
59 -> 62 [color="red" label="Lines 94 - 96: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\lint __CPAchecker_TMP_2;\l" id="59 -> 62"]
62 -> 63 [label="Line 96: \l[100 <= (x + n)]\l" id="62 -> 63"]
62 -> 67 [color="red" label="Line 96: \l[!(100 <= (x + n))]\l" id="62 -> 67"]
67 -> 70 [color="red" label="Line 0: \l__CPAchecker_TMP_2 = 0;\l" id="67 -> 70"]
70 -> 71 [color="red" label="Line 96: \l__VERIFIER_assert(__CPAchecker_TMP_2)\l" id="70 -> 71"]
71 -> 72 [color="red" label="Line 0: \lFunction start dummy edge\l" id="71 -> 72"]
72 -> 73 [label="Line 78: \l[cond == 0]\l" id="72 -> 73"]
72 -> 74 [color="red" label="Line 78: \l[!(cond == 0)]\l" id="72 -> 74"]
74 -> 76 [color="red" label="Line 0: \ldefault return\l" id="74 -> 76"]
76 -> 77 [color="red" label="Line 96: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert(__CPAchecker_TMP_2);\l" id="76 -> 77"]
77 -> 78 [color="red" label="Line 98: \lruntime_div = x / (n - y);\l" id="77 -> 78"]
78 -> 80 [color="red" label="Line 0: \l\l" id="78 -> 80"]
80 -> 81 [color="red" label="Line 93: \l[(x + y) <= 999999]\l" id="80 -> 81"]
80 -> 82 [label="Line 93: \l[!((x + y) <= 999999)]\l" id="80 -> 82"]
81 -> 84 [color="red" label="Lines 94 - 96: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\lint __CPAchecker_TMP_2;\l" id="81 -> 84"]
84 -> 85 [label="Line 96: \l[100 <= (x + n)]\l" id="84 -> 85"]
84 -> 89 [color="red" label="Line 96: \l[!(100 <= (x + n))]\l" id="84 -> 89"]
89 -> 92 [color="red" label="Line 0: \l__CPAchecker_TMP_2 = 0;\l" id="89 -> 92"]
92 -> 93 [color="red" label="Line 96: \l__VERIFIER_assert(__CPAchecker_TMP_2)\l" id="92 -> 93"]
93 -> 94 [color="red" label="Line 0: \lFunction start dummy edge\l" id="93 -> 94"]
94 -> 95 [color="red" label="Line 78: \l[cond == 0]\l" id="94 -> 95"]
94 -> 96 [label="Line 78: \l[!(cond == 0)]\l" id="94 -> 96"]
95 -> 98 [color="red" label="Line 78: \lLabel: ERROR\l" id="95 -> 98"]
85 -> 87 [label="Line 96: \l[(x + n) <= 2147483647]\l" id="85 -> 87"]
85 -> 89 [label="Line 96: \l[!((x + n) <= 2147483647)]\l" id="85 -> 89"]
87 -> 92 [label="Line 0: \l__CPAchecker_TMP_2 = 1;\l" id="87 -> 92"]
63 -> 65 [label="Line 96: \l[(x + n) <= 2147483647]\l" id="63 -> 65"]
63 -> 67 [label="Line 96: \l[!((x + n) <= 2147483647)]\l" id="63 -> 67"]
65 -> 70 [label="Line 0: \l__CPAchecker_TMP_2 = 1;\l" id="65 -> 70"]
}
