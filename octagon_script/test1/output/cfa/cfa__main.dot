digraph main {
8 [shape="circle" label="N8\n33"]
35 [shape="circle" label="N35\n32"]
12 [shape="diamond" label="N12\n22"]
14 [shape="circle" label="N14\n1"]
15 [shape="diamond" label="N15\n21"]
13 [shape="circle" label="N13\n20"]
19 [shape="doublecircle" label="N19\n17"]
20 [shape="circle" label="N20\n15"]
21 [shape="circle" label="N21\n16"]
22 [shape="circle" label="N22\n14"]
28 [shape="diamond" label="N28\n8"]
29 [shape="diamond" label="N29\n7"]
31 [shape="circle" label="N31\n6"]
32 [shape="circle" label="N32\n4"]
33 [shape="circle" label="N33\n3"]
30 [shape="circle" label="N30\n5"]
7 [shape="circle" label="N7\n0"]
35 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">35</td><td align="left">void abort();</td></tr><tr><td align="right">36</td><td align="left">void __VERIFIER_assert(int cond);</td></tr><tr><td align="right">37</td><td align="left">int __VERIFIER_nondet_int();</td></tr><tr><td align="right">38</td><td align="left">void __VERIFIER_assume(int);</td></tr><tr><td align="right">39</td><td align="left">void __VERIFIER_assert(int);</td></tr><tr><td align="right">40</td><td align="left">int main();</td></tr><tr><td align="right">41</td><td align="left">Function start dummy edge</td></tr><tr><td align="right">9</td><td align="left">int x = 0;</td></tr><tr><td align="right">10</td><td align="left">int n;</td></tr><tr><td align="right">11</td><td align="left">n = __VERIFIER_nondet_int();</td></tr></table>>]
35 -> 12[label=""]
13 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">13</td><td align="left">int y = n;</td></tr><tr><td align="right">17</td><td align="left">int runtime_div;</td></tr><tr><td align="right">18</td><td align="left">while</td></tr></table>>]
13 -> 19[label=""]
22 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">22</td><td align="left">x = x + 1;</td></tr><tr><td align="right">23</td><td align="left">__CPAchecker_TMP_0;</td></tr><tr><td align="right">24</td><td align="left">const int __CPAchecker_TMP_1 = y;</td></tr><tr><td align="right">25</td><td align="left">y = y - 1;</td></tr><tr><td align="right">26</td><td align="left">__CPAchecker_TMP_1;</td></tr><tr><td align="right">27</td><td align="left">int __CPAchecker_TMP_2;</td></tr></table>>]
22 -> 28[label=""]
33 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">33</td><td align="left">runtime_div = x / (n - y);</td></tr><tr><td align="right">34</td><td align="left"></td></tr></table>>]
33 -> 19[label=""]
8 -> 35 [label="INIT GLOBAL VARS" fontname="Courier New"]
12 -> 14 [label="[n < 100]" fontname="Courier New"]
12 -> 15 [label="[!(n < 100)]" fontname="Courier New"]
15 -> 14 [label="[n > 1000000]" fontname="Courier New"]
15 -> 13 [label="[!(n > 1000000)]" fontname="Courier New"]
19 -> 20 [label="[(x + y) <= 999999]" fontname="Courier New"]
19 -> 21 [label="[!((x + y) <= 999999)]" fontname="Courier New"]
20 -> 22 [label="const int __CPAchecker_TMP_0 = x;" fontname="Courier New"]
28 -> 29 [label="[100 <= (x + n)]" fontname="Courier New"]
28 -> 31 [label="[!(100 <= (x + n))]" fontname="Courier New"]
31 -> 32 [label="__CPAchecker_TMP_2 = 0;" fontname="Courier New"]
100001 [shape="component" label="__VERIFIER_assert"]
32 -> 100001 [label="__VERIFIER_assert(__CPAchecker_TMP_2);" fontname="Courier New"]
100001 -> 33 [label="" fontname="Courier New"]
29 -> 30 [label="[(x + n) <= 2147483647]" fontname="Courier New"]
29 -> 31 [label="[!((x + n) <= 2147483647)]" fontname="Courier New"]
14 -> 7 [label="return 0;" fontname="Courier New"]
21 -> 7 [label="default return" fontname="Courier New"]
30 -> 32 [label="__CPAchecker_TMP_2 = 1;" fontname="Courier New"]
}