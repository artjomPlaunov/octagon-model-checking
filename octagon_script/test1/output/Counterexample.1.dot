digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N8\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
1 [label="1 @ N35\nmain\n" id="1"]
2 [label="2 @ N12\nmain\n" id="2"]
4 [label="4 @ N15\nmain\n" id="4"]
6 [label="6 @ N13\nmain\n" id="6"]
8 [label="8 @ N18\nmain\n" id="8"]
10 [fillcolor="cornflowerblue" label="10 @ N19\nmain\nAbstractionState: ABS1: true\n" id="10"]
11 [label="11 @ N20\nmain\n" id="11"]
14 [label="14 @ N28\nmain\n" id="14"]
19 [label="19 @ N31\nmain\n" id="19"]
22 [label="22 @ N32\nmain\n" id="22"]
23 [label="23 @ N1\n__VERIFIER_assert entry\n" id="23"]
24 [label="24 @ N2\n__VERIFIER_assert\n" id="24"]
25 [label="25 @ N4\n__VERIFIER_assert\n" id="25"]
28 [fillcolor="red" label="28 @ N5\n__VERIFIER_assert\nAbstractionState: ABS2: true\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="28"]
15 [label="15 @ N29\nmain\n" id="15"]
17 [label="17 @ N30\nmain\n" id="17"]
0 -> 1 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 1"]
1 -> 2 [color="red" label="Lines 77 - 86: \lvoid abort();\lvoid __VERIFIER_assert(int cond);\lint __VERIFIER_nondet_int();\lvoid __VERIFIER_assume(int);\lvoid __VERIFIER_assert(int);\lint main();\lFunction start dummy edge\lint x = 0;\lint n;\ln = __VERIFIER_nondet_int();\l" id="1 -> 2"]
2 -> 4 [color="red" label="Line 87: \l[!(n < 100)]\l" id="2 -> 4"]
2 -> 7 [label="Line 87: \l[n < 100]\l" id="2 -> 7"]
4 -> 6 [color="red" label="Line 87: \l[!(n > 1000000)]\l" id="4 -> 6"]
4 -> 7 [label="Line 87: \l[n > 1000000]\l" id="4 -> 7"]
6 -> 8 [color="red" label="Lines 90 - 91: \lint y = n;\lint runtime_div;\l" id="6 -> 8"]
8 -> 10 [color="red" label="Line 93: \lwhile\l" id="8 -> 10"]
10 -> 11 [color="red" label="Line 93: \l[(x + y) <= 999999]\l" id="10 -> 11"]
10 -> 12 [label="Line 93: \l[!((x + y) <= 999999)]\l" id="10 -> 12"]
11 -> 14 [color="red" label="Lines 94 - 96: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\lint __CPAchecker_TMP_2;\l" id="11 -> 14"]
14 -> 15 [label="Line 96: \l[100 <= (x + n)]\l" id="14 -> 15"]
14 -> 19 [color="red" label="Line 96: \l[!(100 <= (x + n))]\l" id="14 -> 19"]
19 -> 22 [color="red" label="Line 0: \l__CPAchecker_TMP_2 = 0;\l" id="19 -> 22"]
22 -> 23 [color="red" label="Line 96: \l__VERIFIER_assert(__CPAchecker_TMP_2)\l" id="22 -> 23"]
23 -> 24 [color="red" label="Line 0: \lFunction start dummy edge\l" id="23 -> 24"]
24 -> 25 [color="red" label="Line 78: \l[cond == 0]\l" id="24 -> 25"]
24 -> 26 [label="Line 78: \l[!(cond == 0)]\l" id="24 -> 26"]
25 -> 28 [color="red" label="Line 78: \lLabel: ERROR\l" id="25 -> 28"]
15 -> 17 [label="Line 96: \l[(x + n) <= 2147483647]\l" id="15 -> 17"]
15 -> 19 [label="Line 96: \l[!((x + n) <= 2147483647)]\l" id="15 -> 19"]
17 -> 22 [label="Line 0: \l__CPAchecker_TMP_2 = 1;\l" id="17 -> 22"]
}
